import numpy as np
import matplotlib.pyplot as plt

beta = np.array([
    0.25, +3.500000e-01, +4.500000e-01, +5.500000e-01, +6.500000e-01,
    +7.500000e-01, +8.500000e-01, +9.500000e-01, +1.050000e+00, +1.150000e+00,
    +1.250000e+00, +1.350000e+00, +1.450000e+00, +1.550000e+00, +1.650000e+00,
    +1.750000e+00, +1.850000e+00, +1.950000e+00, +2.050000e+00, +2.150000e+00,
    +2.250000e+00, +2.350000e+00, +2.450000e+00, +2.550000e+00, +2.650000e+00,
    +2.750000e+00, +2.850000e+00, +2.950000e+00, +3.050000e+00, +3.150000e+00,
    +3.250000e+00, +3.350000e+00, +3.450000e+00, +3.550000e+00, +3.650000e+00,
    +3.750000e+00, +3.850000e+00, +3.950000e+00, +4.050000e+00, +4.150000e+00,
    +4.250000e+00, +4.350000e+00, +4.450000e+00, +4.550000e+00, +4.650000e+00,
    +4.750000e+00, +4.850000e+00, +4.950000e+00, +5.050000e+00, +5.150000e+00,
    +5.250000e+00, +5.350000e+00, +5.450000e+00, +5.550000e+00, +5.650000e+00,
    +5.750000e+00, +5.850000e+00, +5.950000e+00, +6.050000e+00, +6.150000e+00,
    +6.250000e+00, +6.350000e+00, +6.450000e+00, +6.550000e+00, +6.650000e+00,
    +6.750000e+00, +6.850000e+00, +6.950000e+00, +7.050000e+00, +7.150000e+00,
    +7.250000e+00, +7.350000e+00, +7.450000e+00, +7.550000e+00, +7.650000e+00,
    +7.750000e+00, +7.850000e+00, +7.950000e+00, +8.050000e+00, +8.150000e+00,
    +8.250000e+00, +8.350000e+00, +8.450000e+00, +8.550000e+00, +8.650000e+00,
    +8.750000e+00, +8.850000e+00, +8.950000e+00, +9.050000e+00, +9.150000e+00,
    +9.250000e+00, +9.350000e+00, +9.450000e+00, +9.550000e+00, +9.650000e+00,
    +9.750000e+00, +9.850000e+00, +9.950000e+00, +1.005000e+01, +1.015000e+01
])

temperature = 1 / beta

total_energy_QM_theoretical = 0.5 / np.tanh(0.5 * beta)

total_energy_QM_exp = np.array([
    +4.322829e+00, +2.493225e+00, +2.628168e+00, +1.900089e+00, +1.553040e+00,
    +1.333857e+00, +1.139233e+00, +1.049601e+00, +9.257113e-01, +9.685993e-01,
    +9.321330e-01, +7.959271e-01, +8.509487e-01, +6.975419e-01, +6.832096e-01,
    +6.790721e-01, +5.863094e-01, +6.675136e-01, +5.981116e-01, +5.919830e-01,
    +5.928227e-01, +5.595922e-01, +5.856703e-01, +6.098860e-01, +5.336633e-01,
    +4.979418e-01, +5.251609e-01, +5.814564e-01, +5.599510e-01, +5.118570e-01,
    +5.223471e-01, +5.150750e-01, +5.237072e-01, +5.110283e-01, +5.116205e-01,
    +5.094489e-01, +5.230786e-01, +5.219920e-01, +5.027320e-01, +5.094343e-01,
    +5.137585e-01, +4.961758e-01, +4.887161e-01, +4.840022e-01, +5.046131e-01,
    +4.957332e-01, +4.898678e-01, +4.853536e-01, +4.998824e-01, +4.827616e-01,
    +4.944363e-01, +4.893695e-01, +5.083653e-01, +5.062014e-01, +4.833523e-01,
    +4.717088e-01, +4.994704e-01, +4.959403e-01, +4.835566e-01, +4.846080e-01,
    +4.777986e-01, +5.236352e-01, +4.788820e-01, +4.858469e-01, +4.897184e-01,
    +4.955080e-01, +4.988491e-01, +4.704797e-01, +4.865070e-01, +4.917781e-01,
    +4.816336e-01, +4.894728e-01, +4.812021e-01, +4.706788e-01, +4.915705e-01,
    +4.841856e-01, +5.147495e-01, +4.799269e-01, +5.035640e-01, +5.023932e-01,
    +4.677350e-01, +4.937106e-01, +4.873678e-01, +4.776421e-01, +5.128128e-01,
    +5.014247e-01, +4.915695e-01, +5.070576e-01, +4.887922e-01, +4.808430e-01,
    +4.773538e-01, +4.892705e-01, +4.823339e-01, +5.067907e-01, +4.804080e-01,
    +4.752003e-01, +5.043707e-01, +4.944141e-01, +4.921699e-01, +4.989172e-01
])

kinetic_energy_QM_exp = np.array([
    +2.007707e+00, +1.439635e+00, +1.125671e+00, +9.271469e-01, +7.915112e-01,
    +6.934654e-01, +6.181269e-01, +5.609842e-01, +5.132130e-01, +4.764152e-01,
    +4.456076e-01, +4.199856e-01, +3.986217e-01, +3.806302e-01, +3.621727e-01,
    +3.493954e-01, +3.382981e-01, +3.293996e-01, +3.182883e-01, +3.104400e-01,
    +3.041199e-01, +2.943799e-01, +2.888368e-01, +2.852872e-01, +2.803498e-01,
    +2.725499e-01, +2.743132e-01, +2.801827e-01, +2.737428e-01, +2.643222e-01,
    +2.621157e-01, +2.655942e-01, +2.635155e-01, +2.645418e-01, +2.601901e-01,
    +2.580651e-01, +2.642029e-01, +2.582788e-01, +2.490002e-01, +2.512343e-01,
    +2.531396e-01, +2.506218e-01, +2.479001e-01, +2.519972e-01, +2.489592e-01,
    +2.508026e-01, +2.477826e-01, +2.464403e-01, +2.512710e-01, +2.466360e-01,
    +2.425710e-01, +2.477582e-01, +2.508089e-01, +2.499749e-01, +2.442602e-01,
    +2.390072e-01, +2.464203e-01, +2.491194e-01, +2.476661e-01, +2.446268e-01,
    +2.381588e-01, +2.542116e-01, +2.434318e-01, +2.461413e-01, +2.467478e-01,
    +2.464013e-01, +2.483273e-01, +2.345206e-01, +2.462080e-01, +2.484693e-01,
    +2.418923e-01, +2.461728e-01, +2.406128e-01, +2.375101e-01, +2.477353e-01,
    +2.423697e-01, +2.537520e-01, +2.415879e-01, +2.485949e-01, +2.492199e-01,
    +2.371137e-01, +2.459697e-01, +2.432728e-01, +2.393339e-01, +2.565111e-01,
    +2.490527e-01, +2.451218e-01, +2.538824e-01, +2.428045e-01, +2.441774e-01,
    +2.389322e-01, +2.454501e-01, +2.402389e-01, +2.525353e-01, +2.397487e-01,
    +2.406798e-01, +2.515326e-01, +2.469157e-01, +2.465461e-01, +2.498076e-01
])

potential_energy_exp = np.array([
    +2.315123e+00, +1.053590e+00, +1.502497e+00, +9.729416e-01, +7.615292e-01,
    +6.403912e-01, +5.211066e-01, +4.886168e-01, +4.124983e-01, +4.921842e-01,
    +4.865254e-01, +3.759416e-01, +4.523271e-01, +3.169118e-01, +3.210369e-01,
    +3.296767e-01, +2.480113e-01, +3.381140e-01, +2.798233e-01, +2.815429e-01,
    +2.887029e-01, +2.652123e-01, +2.968335e-01, +3.245988e-01, +2.533134e-01,
    +2.253919e-01, +2.508477e-01, +3.012737e-01, +2.862082e-01, +2.475348e-01,
    +2.602314e-01, +2.494808e-01, +2.601917e-01, +2.464865e-01, +2.514304e-01,
    +2.513838e-01, +2.588757e-01, +2.637132e-01, +2.537318e-01, +2.582000e-01,
    +2.606189e-01, +2.455540e-01, +2.408159e-01, +2.320051e-01, +2.556538e-01,
    +2.449306e-01, +2.420852e-01, +2.389134e-01, +2.486115e-01, +2.361255e-01,
    +2.518653e-01, +2.416113e-01, +2.575564e-01, +2.562265e-01, +2.390922e-01,
    +2.327015e-01, +2.530502e-01, +2.468210e-01, +2.358905e-01, +2.399812e-01,
    +2.396398e-01, +2.694235e-01, +2.354502e-01, +2.397056e-01, +2.429706e-01,
    +2.491067e-01, +2.505218e-01, +2.359591e-01, +2.402991e-01, +2.433088e-01,
    +2.397412e-01, +2.433000e-01, +2.405893e-01, +2.331687e-01, +2.438353e-01,
    +2.418159e-01, +2.609974e-01, +2.383391e-01, +2.549691e-01, +2.531733e-01,
    +2.306213e-01, +2.477408e-01, +2.440950e-01, +2.383083e-01, +2.563017e-01,
    +2.523721e-01, +2.464477e-01, +2.531752e-01, +2.459877e-01, +2.366656e-01,
    +2.384217e-01, +2.438204e-01, +2.420950e-01, +2.542554e-01, +2.406593e-01,
    +2.345205e-01, +2.528381e-01, +2.474984e-01, +2.456238e-01, +2.491096e-01
])

plt.title("P=64")
plt.plot(temperature, total_energy_QM_theoretical, label="E QM THE")
plt.plot(temperature, total_energy_QM_exp, label="E QM EXP")
plt.plot(temperature, temperature, label="E CL THE")
plt.plot(temperature, kinetic_energy_QM_exp, label="KE QM EXP")
plt.plot(temperature, 0.5 * temperature, label="KE CL THE")
plt.plot(temperature, potential_energy_exp, label="VE QM EXP")
plt.xlabel("temperature(kbT)")
plt.ylabel("energy(kbT)")
plt.legend()
plt.savefig("HO_P_64.pdf")
plt.show()