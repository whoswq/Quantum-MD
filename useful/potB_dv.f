C        Generated by TAPENADE     (INRIA, Ecuador team)
C  Tapenade 3.14 (r7259) - 18 Jan 2019 09:33
C
C  Differentiation of h2opot in forward (tangent) mode (with options multiDirectional):
C   variations   of useful results: v
C   with respect to varying inputs: x
C   RW status of diff variables: v:out x:in
      SUBROUTINE H2OPOT_DV(v, vd, x, xd, nbdirs)
      IMPLICIT NONE
      INTEGER, PARAMETER :: nbdirsmax = 9
C  Hint: nbdirsmax should be the maximum number of differentiation directions
      REAL*8, INTENT(OUT) :: v
      REAL*8, DIMENSION(nbdirsmax), INTENT(OUT) :: vd
      REAL*8, INTENT(IN) :: x(9)
      REAL*8, INTENT(IN) :: xd(nbdirsmax, 9)
      REAL*8 x1(3), x2(3), r1, r2, cost
      REAL*8 x1d(nbdirsmax, 3), x2d(nbdirsmax, 3), r1d(nbdirsmax), r2d(
     +       nbdirsmax), costd(nbdirsmax)
      INTRINSIC SUM
      INTRINSIC SQRT
      REAL*8 arg1(3)
      REAL*8 arg1d(nbdirsmax, 3)
      REAL*8 arg2
      REAL*8 arg2d(nbdirsmax)
      INTEGER nd
      INTEGER nbdirs
      x1 = x(1:3) - x(4:6)
      x2 = x(7:9) - x(4:6)
      arg1 = x1**2
      arg2 = SUM(arg1)
      DO nd=1,nbdirs
        x1d(nd, :) = xd(nd, 1:3) - xd(nd, 4:6)
        x2d(nd, :) = xd(nd, 7:9) - xd(nd, 4:6)
        arg1d(nd, :) = 2*x1*x1d(nd, :)
        arg2d(nd) = SUM(arg1d(nd, :))
        IF (arg2 .EQ. 0.0) THEN
          r1d(nd) = 0.D0
        ELSE
          r1d(nd) = arg2d(nd)/(2.0*SQRT(arg2))
        END IF
        arg1d(nd, :) = 2*x2*x2d(nd, :)
        arg2d(nd) = SUM(arg1d(nd, :))
        arg1d(nd, :) = x1d(nd, :)*x2 + x1*x2d(nd, :)
      ENDDO
      r1 = SQRT(arg2)
      arg1 = x2**2
      arg2 = SUM(arg1)
      r2 = SQRT(arg2)
      arg1 = x1*x2
      DO nd=1,nbdirs
        IF (arg2 .EQ. 0.0) THEN
          r2d(nd) = 0.D0
        ELSE
          r2d(nd) = arg2d(nd)/(2.0*SQRT(arg2))
        END IF
        costd(nd) = ((SUM(arg1d(nd, :))*r1-SUM(arg1)*r1d(nd))*r2/r1**2-
     +    SUM(arg1)*r2d(nd)/r1)/r2**2
      ENDDO
      cost = SUM(arg1)/r1/r2
      CALL POTV_DV(v, vd, r1, r1d, r2, r2d, cost, costd, nbdirs)
      END

C  Differentiation of potv in forward (tangent) mode (with options multiDirectional):
C   variations   of useful results: v
C   with respect to varying inputs: xcos r1 r2
C
      SUBROUTINE POTV_DV(v, vd, r1, r1d, r2, r2d, xcos, xcosd, nbdirs)
      IMPLICIT NONE
      INTEGER, PARAMETER :: nbdirsmax = 9
C  Hint: nbdirsmax should be the maximum number of differentiation directions
      DOUBLE PRECISION xmassr
      DOUBLE PRECISION xmass
      DOUBLE PRECISION g1
      DOUBLE PRECISION g2
C
      COMMON /mass/ xmass(3), g1, g2, xmassr(3)
      DOUBLE PRECISION u
      DOUBLE PRECISION ud
      DOUBLE PRECISION pv
      DIMENSION pv(20), u(20)
      DIMENSION ud(nbdirsmax, 20)
      DOUBLE PRECISION ht
      DOUBLE PRECISION htd
      DIMENSION ht(20)
      DIMENSION htd(nbdirsmax, 20)
      DOUBLE PRECISION pi
      INTRINSIC DACOS
      DOUBLE PRECISION q1
      DOUBLE PRECISION q1d(nbdirsmax)
      DOUBLE PRECISION q2
      DOUBLE PRECISION q2d(nbdirsmax)
      DOUBLE PRECISION theta
      DOUBLE PRECISION thetad(nbdirsmax)
      INTRINSIC ACOS
      DOUBLE PRECISION xx
      DOUBLE PRECISION xxd(nbdirsmax)
      DOUBLE PRECISION yy
      DOUBLE PRECISION yyd(nbdirsmax)
      INTRINSIC ABS
      DOUBLE PRECISION cost
      DOUBLE PRECISION costd(nbdirsmax)
      INTRINSIC SQRT
      DOUBLE PRECISION f1
      DOUBLE PRECISION f2
      DOUBLE PRECISION f12
      DOUBLE PRECISION p1
      DOUBLE PRECISION p1d(nbdirsmax)
      DOUBLE PRECISION p2
      DOUBLE PRECISION p2d(nbdirsmax)
      DOUBLE PRECISION s1
      DOUBLE PRECISION s1d(nbdirsmax)
      DOUBLE PRECISION s2
      DOUBLE PRECISION s2d(nbdirsmax)
      DOUBLE PRECISION q3
      DOUBLE PRECISION q3d(nbdirsmax)
      DOUBLE PRECISION thetaeq
      DOUBLE PRECISION req
      DOUBLE PRECISION y1
      DOUBLE PRECISION y1d(nbdirsmax)
      DOUBLE PRECISION y2
      DOUBLE PRECISION y2d(nbdirsmax)
      INTRINSIC COS
      DOUBLE PRECISION y3
      DOUBLE PRECISION y3d(nbdirsmax)
      DOUBLE PRECISION s3
      DOUBLE PRECISION s3d(nbdirsmax)
      INTEGER i5
      DOUBLE PRECISION vt
      DOUBLE PRECISION vtd(nbdirsmax)
      INTEGER i
      DOUBLE PRECISION thetanew
      DOUBLE PRECISION thetanewd(nbdirsmax)
      DOUBLE PRECISION vb
      DOUBLE PRECISION vbd(nbdirsmax)
      DOUBLE PRECISION vbn
      DOUBLE PRECISION vbnd(nbdirsmax)
      DOUBLE PRECISION vn
      DOUBLE PRECISION vnd(nbdirsmax)
      DOUBLE PRECISION arg1
      DOUBLE PRECISION arg1d(nbdirsmax)
      DOUBLE PRECISION result1
      DOUBLE PRECISION result1d(nbdirsmax)
      INTEGER nd
      INTEGER ii1
      INTEGER npropin
      DOUBLE PRECISION xcos
      DOUBLE PRECISION xcosd(nbdirsmax)
      DOUBLE PRECISION v
      DOUBLE PRECISION vd(nbdirsmax)
      DOUBLE PRECISION rz
      DOUBLE PRECISION toang
      DOUBLE PRECISION x0
      DOUBLE PRECISION x1
      DOUBLE PRECISION x2
      DOUBLE PRECISION r1
      DOUBLE PRECISION r1d(nbdirsmax)
      DOUBLE PRECISION r2
      DOUBLE PRECISION r2d(nbdirsmax)
      DOUBLE PRECISION rho
      DOUBLE PRECISION tiny
      DOUBLE PRECISION cmtoau
      DOUBLE PRECISION a
      INTEGER nbdirs
      DATA rz /0.9576257/
      DATA rho /75.48992362/
      DATA toang /0.5291772/
      DATA cmtoau /219474.624/
      DATA a /2.22600/
      DATA x1 /1.0d0/
      DATA x0 /0.0d0/
      DATA tiny /9.0d-15/
      DATA x2 /2.0d0/
      DATA pv /0.999990527072135, -0.002771160825579, 0.007235940923836
     +     , -0.006201502857102, 0.013915771256198, -0.000676732490103, 
     +     -0.008240369687853, -0.004176466767749, -0.001304789757275, -
     +     0.001517064974493, 0.002075352447003, 0.004553768345354, 
     +     0.006482689928383, -0.017047069546975, 0.001594521562999, -
     +     0.000755833001036, 0.019608670455960, 0.014305253785881, -
     +     0.019900800460336, -0.007462306281290/
      DATA npropin /20/
C
      pi = DACOS(-1.d0)
C
      IF (g1 .EQ. x0) THEN
        q1 = r1
        q2 = r2
        DO nd=1,nbdirs
          IF (xcos .EQ. 1.0 .OR. xcos .EQ. (-1.0)) THEN
            thetad(nd) = 0.D0
          ELSE
            thetad(nd) = -(xcosd(nd)/SQRT(1.0-xcos**2))
          END IF
        ENDDO
        theta = ACOS(xcos)
      ELSE IF (g2 .EQ. x0) THEN
        DO nd=1,nbdirs
          xxd(nd) = g1*r1d(nd)
          yyd(nd) = (x1-g1)*r1d(nd)
        ENDDO
        xx = r1*g1
        yy = r1*(x1-g1)
        IF (r2 .EQ. x0 .OR. xcos .GE. x1 - tiny) THEN
          IF (xx - r2 .GE. 0.) THEN
            q1 = xx - r2
          ELSE
            q1 = -(xx-r2)
          END IF
          q2 = yy + r2
          cost = -x1
          DO nd=1,nbdirsmax
            costd(nd) = 0.D0
          ENDDO
        ELSE IF (xcos .LE. tiny - x1) THEN
          q1 = xx + r2
          IF (yy + r2 .GE. 0.) THEN
            q2 = yy + r2
          ELSE
            q2 = -(yy+r2)
          END IF
          cost = x1
          DO nd=1,nbdirsmax
            costd(nd) = 0.D0
          ENDDO
        ELSE
          arg1 = xx*xx + r2*r2 - x2*xx*r2*xcos
          DO nd=1,nbdirs
            arg1d(nd) = xxd(nd)*xx + xx*xxd(nd) + r2d(nd)*r2 + r2*r2d(nd
     +        ) - x2*((xxd(nd)*r2+xx*r2d(nd))*xcos+xx*r2*xcosd(nd))
            IF (arg1 .EQ. 0.0) THEN
              q1d(nd) = 0.D0
            ELSE
              q1d(nd) = arg1d(nd)/(2.0*SQRT(arg1))
            END IF
            arg1d(nd) = yyd(nd)*yy + yy*yyd(nd) + r2d(nd)*r2 + r2*r2d(nd
     +        ) + x2*((yyd(nd)*r2+yy*r2d(nd))*xcos+yy*r2*xcosd(nd))
          ENDDO
          q1 = SQRT(arg1)
          arg1 = yy*yy + r2*r2 + x2*yy*r2*xcos
          q2 = SQRT(arg1)
          DO nd=1,nbdirs
            IF (arg1 .EQ. 0.0) THEN
              q2d(nd) = 0.D0
            ELSE
              q2d(nd) = arg1d(nd)/(2.0*SQRT(arg1))
            END IF
            costd(nd) = ((2*q1*q1d(nd)+2*q2*q2d(nd)-2*r1*r1d(nd))*x2*q1*
     +        q2-(q1**2+q2**2-r1**2)*x2*(q1d(nd)*q2+q1*q2d(nd)))/(x2*q1*
     +        q2)**2
          ENDDO
          cost = (q1**2+q2**2-r1**2)/(x2*q1*q2)
        END IF
        DO nd=1,nbdirs
          IF (cost .EQ. 1.0 .OR. cost .EQ. (-1.0)) THEN
            thetad(nd) = 0.D0
          ELSE
            thetad(nd) = -(costd(nd)/SQRT(1.0-cost**2))
          END IF
        ENDDO
        theta = ACOS(cost)
      ELSE
        f1 = x1/g1
        f2 = x1/g2
        f12 = x1 - f1*f2
        p1 = r1*(x1-f1)/(g2*f12)
        p2 = r2*(x1-f2)/(g1*f12)
        s1 = r1 - p1
        s2 = r2 - p2
        arg1 = p1*p1 + s2*s2 + x2*p1*s2*xcos
        DO nd=1,nbdirs
          p1d(nd) = (x1-f1)*r1d(nd)/(g2*f12)
          p2d(nd) = (x1-f2)*r2d(nd)/(g1*f12)
          s1d(nd) = r1d(nd) - p1d(nd)
          s2d(nd) = r2d(nd) - p2d(nd)
          arg1d(nd) = p1d(nd)*p1 + p1*p1d(nd) + s2d(nd)*s2 + s2*s2d(nd) 
     +      + x2*((p1d(nd)*s2+p1*s2d(nd))*xcos+p1*s2*xcosd(nd))
          IF (arg1 .EQ. 0.0) THEN
            result1d(nd) = 0.D0
          ELSE
            result1d(nd) = arg1d(nd)/(2.0*SQRT(arg1))
          END IF
          q1d(nd) = result1d(nd)/(x1-g1)
          arg1d(nd) = p2d(nd)*p2 + p2*p2d(nd) + s1d(nd)*s1 + s1*s1d(nd) 
     +      + x2*((p2d(nd)*s1+p2*s1d(nd))*xcos+p2*s1*xcosd(nd))
        ENDDO
        result1 = SQRT(arg1)
        q1 = result1/(x1-g1)
        arg1 = p2*p2 + s1*s1 + x2*p2*s1*xcos
        DO nd=1,nbdirs
          IF (arg1 .EQ. 0.0) THEN
            result1d(nd) = 0.D0
          ELSE
            result1d(nd) = arg1d(nd)/(2.0*SQRT(arg1))
          END IF
          q2d(nd) = result1d(nd)/(x1-g2)
          arg1d(nd) = p1d(nd)*p1 + p1*p1d(nd) + p2d(nd)*p2 + p2*p2d(nd) 
     +      - x2*((p1d(nd)*p2+p1*p2d(nd))*xcos+p1*p2*xcosd(nd))
        ENDDO
        result1 = SQRT(arg1)
        q2 = result1/(x1-g2)
        arg1 = p1*p1 + p2*p2 - x2*p1*p2*xcos
        q3 = SQRT(arg1)
        cost = (q1*q1+q2*q2-q3*q3)/(x2*q1*q2)
        DO nd=1,nbdirs
          IF (arg1 .EQ. 0.0) THEN
            q3d(nd) = 0.D0
          ELSE
            q3d(nd) = arg1d(nd)/(2.0*SQRT(arg1))
          END IF
          costd(nd) = ((q1d(nd)*q1+q1*q1d(nd)+q2d(nd)*q2+q2*q2d(nd)-q3d(
     +      nd)*q3-q3*q3d(nd))*x2*q1*q2-(q1*q1+q2*q2-q3*q3)*x2*(q1d(nd)*
     +      q2+q1*q2d(nd)))/(x2*q1*q2)**2
          IF (cost .EQ. 1.0 .OR. cost .EQ. (-1.0)) THEN
            thetad(nd) = 0.D0
          ELSE
            thetad(nd) = -(costd(nd)/SQRT(1.0-cost**2))
          END IF
        ENDDO
        theta = ACOS(cost)
      END IF
C
      thetaeq = (180.d0-rho)*3.141592654/180.d0
      req = rz/toang
      DO nd=1,nbdirs
        y1d(nd) = r1d(nd)
        y2d(nd) = -(thetad(nd)*SIN(theta))
        y3d(nd) = r2d(nd)
C
        s1d(nd) = (y1d(nd)+y3d(nd))/2.0d0
        s2d(nd) = y2d(nd)
        s3d(nd) = (y1d(nd)-y3d(nd))/2.0d0
      ENDDO
      y1 = r1 - req
      y2 = COS(theta) - COS(thetaeq)
      y3 = r2 - req
      s1 = (y1+y3)/2.0d0
      s2 = y2
      s3 = (y1-y3)/2.0d0
C
      DO i5=1,npropin
        ht(i5) = 0.0d0
      ENDDO
C
      ht(1) = 1.0d0
      DO ii1=1,20
        DO nd=1,nbdirsmax
          htd(nd, ii1) = 0.D0
        ENDDO
      ENDDO
      DO nd=1,nbdirs
        htd(nd, 2) = s1d(nd)*s2 + s1*s2d(nd)
        htd(nd, 3) = s1d(nd)*s3 + s1*s3d(nd)
        htd(nd, 4) = 2*s1*s1d(nd)
        htd(nd, 5) = 3*s1**2*s1d(nd)
        htd(nd, 6) = 2*s3*s3d(nd)
        htd(nd, 7) = 3*s3**2*s3d(nd)
        htd(nd, 8) = 4*s1**3*s1d(nd)
        htd(nd, 9) = 2*s2*s2d(nd)
        htd(nd, 10) = 3*s2**2*s2d(nd)
        htd(nd, 11) = 4*s2**3*s2d(nd)
        htd(nd, 12) = s2d(nd)*s3 + s2*s3d(nd)
        htd(nd, 13) = 2*s1*s1d(nd)*s2 + s1**2*s2d(nd)
        htd(nd, 14) = 2*s1*s1d(nd)*s3 + s1**2*s3d(nd)
        htd(nd, 15) = 2*s2*s2d(nd)*s1 + s2**2*s1d(nd)
        htd(nd, 16) = 2*s2*s2d(nd)*s3 + s2**2*s3d(nd)
        htd(nd, 17) = 2*s3*s3d(nd)*s1 + s3**2*s1d(nd)
        htd(nd, 18) = 2*s3*s3d(nd)*s2 + s3**2*s2d(nd)
        htd(nd, 19) = (s1d(nd)*s2+s1*s2d(nd))*s3 + s1*s2*s3d(nd)
        htd(nd, 20) = 4*s3**3*s3d(nd)
      ENDDO
      ht(2) = s1*s2
      ht(3) = s1*s3
      ht(4) = s1**2
      ht(5) = s1**3
      ht(6) = s3**2
      ht(7) = s3**3
      ht(8) = s1**4
      ht(9) = s2**2
      ht(10) = s2**3
      ht(11) = s2**4
      ht(12) = s2*s3
      ht(13) = s1**2*s2
      ht(14) = s1**2*s3
      ht(15) = s2**2*s1
      ht(16) = s2**2*s3
      ht(17) = s3**2*s1
      ht(18) = s3**2*s2
      ht(19) = s1*s2*s3
      ht(20) = s3**4
C
      vt = 0.0d0
      DO ii1=1,20
        DO nd=1,nbdirsmax
          ud(nd, ii1) = 0.D0
        ENDDO
      ENDDO
      DO nd=1,nbdirsmax
        vtd(nd) = 0.D0
      ENDDO
      DO i=1,npropin
        DO nd=1,nbdirs
          ud(nd, i) = pv(i)*htd(nd, i)
          vtd(nd) = vtd(nd) + ud(nd, i)
        ENDDO
        u(i) = ht(i)*pv(i)
        vt = vt + u(i)
      ENDDO
C
      IF (q1 .GT. 4.0 .AND. q2 .GT. 4.0 .AND. theta .GT. 2.25) THEN
        thetanew = 2.25
        DO nd=1,nbdirsmax
          thetanewd(nd) = 0.D0
        ENDDO
      ELSE
        DO nd=1,nbdirs
          thetanewd(nd) = thetad(nd)
        ENDDO
        thetanew = theta
      END IF
C
      CALL PANTS_DV(vn, vnd, r1, r1d, r2, r2d, xcos, xcosd, npropin, 
     +              nbdirs)
      DO nd=1,nbdirs
        vbd(nd) = 878.6126*3*thetanew**2*thetanewd(nd)/(thetaeq**3-pi**3
     +    ) + (-(381.1*5*thetanew**4*thetanewd(nd)))/(thetaeq**5-pi**5) 
     +    + (-(418.633*2*thetanew*thetanewd(nd)))/(thetaeq**2-pi**2)
        vbnd(nd) = vbd(nd)/219474.624
C
        vd(nd) = vnd(nd)*vt + vn*vtd(nd) + vbnd(nd)
      ENDDO
      vb = 878.6126*(thetanew**3-thetaeq**3)/(thetaeq**3-pi**3) + (-
     +  381.1)*(thetanew**5-thetaeq**5)/(thetaeq**5-pi**5) + (-418.633)*
     +  (thetanew**2-thetaeq**2)/(thetaeq**2-pi**2)
      vbn = vb/219474.624
      v = vn*vt + vbn
      END

C  Differentiation of pants in forward (tangent) mode (with options multiDirectional):
C   variations   of useful results: v
C   with respect to varying inputs: xcos r1 r2
      SUBROUTINE PANTS_DV(v, vd0, r1, r1d, r2, r2d, xcos, xcosd, npropin
     +                    , nbdirs)
      IMPLICIT NONE
      INTEGER, PARAMETER :: nbdirsmax = 9
C  Hint: nbdirsmax should be the maximum number of differentiation directions
      DOUBLE PRECISION xmassr
      DOUBLE PRECISION xmass
      DOUBLE PRECISION g1
      DOUBLE PRECISION g2
      COMMON /mass/ xmass(3), g1, g2, xmassr(3)
      DOUBLE PRECISION hc
      DOUBLE PRECISION hp
      DOUBLE PRECISION uz
      DOUBLE PRECISION pp
      INTEGER jp
      DIMENSION hp(84), hc(84), jp(84), pp(84), uz(84)
      DOUBLE PRECISION rij
      DIMENSION rij(3)
      DOUBLE PRECISION q1
      DOUBLE PRECISION q1d(nbdirsmax)
      DOUBLE PRECISION q2
      DOUBLE PRECISION q2d(nbdirsmax)
      DOUBLE PRECISION theta
      DOUBLE PRECISION thetad(nbdirsmax)
      INTRINSIC ACOS
      DOUBLE PRECISION xx
      DOUBLE PRECISION xxd(nbdirsmax)
      DOUBLE PRECISION yy
      DOUBLE PRECISION yyd(nbdirsmax)
      INTRINSIC ABS
      DOUBLE PRECISION cost
      DOUBLE PRECISION costd(nbdirsmax)
      INTRINSIC SQRT
      DOUBLE PRECISION f1
      DOUBLE PRECISION f2
      DOUBLE PRECISION f12
      DOUBLE PRECISION p1
      DOUBLE PRECISION p1d(nbdirsmax)
      DOUBLE PRECISION p2
      DOUBLE PRECISION p2d(nbdirsmax)
      DOUBLE PRECISION s1
      DOUBLE PRECISION s1d(nbdirsmax)
      DOUBLE PRECISION s2
      DOUBLE PRECISION s2d(nbdirsmax)
      DOUBLE PRECISION q3
      DOUBLE PRECISION q3d(nbdirsmax)
      DOUBLE PRECISION vq
      DOUBLE PRECISION vqd(nbdirsmax)
      DOUBLE PRECISION vbr
      DOUBLE PRECISION vbrd(nbdirsmax)
      DOUBLE PRECISION vd
      DOUBLE PRECISION vdd(nbdirsmax)
      DOUBLE PRECISION v1
      DOUBLE PRECISION v1d(nbdirsmax)
      DOUBLE PRECISION vr
      DOUBLE PRECISION vrd(nbdirsmax)
      DOUBLE PRECISION vp
      DOUBLE PRECISION vpd(nbdirsmax)
      DOUBLE PRECISION arg1
      DOUBLE PRECISION arg1d(nbdirsmax)
      DOUBLE PRECISION result1
      DOUBLE PRECISION result1d(nbdirsmax)
      INTEGER nd
      INTEGER npropin
      DOUBLE PRECISION xcos
      DOUBLE PRECISION xcosd(nbdirsmax)
      DOUBLE PRECISION v
      DOUBLE PRECISION vd0(nbdirsmax)
      DOUBLE PRECISION x0
      DOUBLE PRECISION x1
      DOUBLE PRECISION x2
      DOUBLE PRECISION r1
      DOUBLE PRECISION r1d(nbdirsmax)
      DOUBLE PRECISION r2
      DOUBLE PRECISION r2d(nbdirsmax)
      DOUBLE PRECISION tiny
      INTEGER nbdirs
C
      DATA x1 /1.0d0/
      DATA x0 /0.0d0/
      DATA tiny /9.0d-15/
      DATA x2 /2.0d0/
      IF (g1 .EQ. x0) THEN
        DO nd=1,nbdirs
          q1d(nd) = r1d(nd)
          q2d(nd) = r2d(nd)
          IF (xcos .EQ. 1.0 .OR. xcos .EQ. (-1.0)) THEN
            thetad(nd) = 0.D0
          ELSE
            thetad(nd) = -(xcosd(nd)/SQRT(1.0-xcos**2))
          END IF
        ENDDO
        q1 = r1
        q2 = r2
        theta = ACOS(xcos)
      ELSE IF (g2 .EQ. x0) THEN
        DO nd=1,nbdirs
          xxd(nd) = g1*r1d(nd)
          yyd(nd) = (x1-g1)*r1d(nd)
        ENDDO
        xx = r1*g1
        yy = r1*(x1-g1)
        IF (r2 .EQ. x0 .OR. xcos .GE. x1 - tiny) THEN
          IF (xx - r2 .GE. 0.) THEN
            DO nd=1,nbdirs
              q1d(nd) = xxd(nd) - r2d(nd)
            ENDDO
            q1 = xx - r2
          ELSE
            DO nd=1,nbdirs
              q1d(nd) = -(xxd(nd)-r2d(nd))
            ENDDO
            q1 = -(xx-r2)
          END IF
          DO nd=1,nbdirs
            q2d(nd) = yyd(nd) + r2d(nd)
          ENDDO
          q2 = yy + r2
          cost = -x1
          DO nd=1,nbdirsmax
            costd(nd) = 0.D0
          ENDDO
        ELSE IF (xcos .LE. tiny - x1) THEN
          DO nd=1,nbdirs
            q1d(nd) = xxd(nd) + r2d(nd)
          ENDDO
          q1 = xx + r2
          IF (yy + r2 .GE. 0.) THEN
            DO nd=1,nbdirs
              q2d(nd) = yyd(nd) + r2d(nd)
            ENDDO
            q2 = yy + r2
          ELSE
            DO nd=1,nbdirs
              q2d(nd) = -(yyd(nd)+r2d(nd))
            ENDDO
            q2 = -(yy+r2)
          END IF
          cost = x1
          DO nd=1,nbdirsmax
            costd(nd) = 0.D0
          ENDDO
        ELSE
          arg1 = xx*xx + r2*r2 - x2*xx*r2*xcos
          DO nd=1,nbdirs
            arg1d(nd) = xxd(nd)*xx + xx*xxd(nd) + r2d(nd)*r2 + r2*r2d(nd
     +        ) - x2*((xxd(nd)*r2+xx*r2d(nd))*xcos+xx*r2*xcosd(nd))
            IF (arg1 .EQ. 0.0) THEN
              q1d(nd) = 0.D0
            ELSE
              q1d(nd) = arg1d(nd)/(2.0*SQRT(arg1))
            END IF
            arg1d(nd) = yyd(nd)*yy + yy*yyd(nd) + r2d(nd)*r2 + r2*r2d(nd
     +        ) + x2*((yyd(nd)*r2+yy*r2d(nd))*xcos+yy*r2*xcosd(nd))
          ENDDO
          q1 = SQRT(arg1)
          arg1 = yy*yy + r2*r2 + x2*yy*r2*xcos
          q2 = SQRT(arg1)
          DO nd=1,nbdirs
            IF (arg1 .EQ. 0.0) THEN
              q2d(nd) = 0.D0
            ELSE
              q2d(nd) = arg1d(nd)/(2.0*SQRT(arg1))
            END IF
            costd(nd) = ((2*q1*q1d(nd)+2*q2*q2d(nd)-2*r1*r1d(nd))*x2*q1*
     +        q2-(q1**2+q2**2-r1**2)*x2*(q1d(nd)*q2+q1*q2d(nd)))/(x2*q1*
     +        q2)**2
          ENDDO
          cost = (q1**2+q2**2-r1**2)/(x2*q1*q2)
        END IF
        DO nd=1,nbdirs
          IF (cost .EQ. 1.0 .OR. cost .EQ. (-1.0)) THEN
            thetad(nd) = 0.D0
          ELSE
            thetad(nd) = -(costd(nd)/SQRT(1.0-cost**2))
          END IF
        ENDDO
        theta = ACOS(cost)
      ELSE
        f1 = x1/g1
        f2 = x1/g2
        f12 = x1 - f1*f2
        p1 = r1*(x1-f1)/(g2*f12)
        p2 = r2*(x1-f2)/(g1*f12)
        s1 = r1 - p1
        s2 = r2 - p2
        arg1 = p1*p1 + s2*s2 + x2*p1*s2*xcos
        DO nd=1,nbdirs
          p1d(nd) = (x1-f1)*r1d(nd)/(g2*f12)
          p2d(nd) = (x1-f2)*r2d(nd)/(g1*f12)
          s1d(nd) = r1d(nd) - p1d(nd)
          s2d(nd) = r2d(nd) - p2d(nd)
          arg1d(nd) = p1d(nd)*p1 + p1*p1d(nd) + s2d(nd)*s2 + s2*s2d(nd) 
     +      + x2*((p1d(nd)*s2+p1*s2d(nd))*xcos+p1*s2*xcosd(nd))
          IF (arg1 .EQ. 0.0) THEN
            result1d(nd) = 0.D0
          ELSE
            result1d(nd) = arg1d(nd)/(2.0*SQRT(arg1))
          END IF
          q1d(nd) = result1d(nd)/(x1-g1)
          arg1d(nd) = p2d(nd)*p2 + p2*p2d(nd) + s1d(nd)*s1 + s1*s1d(nd) 
     +      + x2*((p2d(nd)*s1+p2*s1d(nd))*xcos+p2*s1*xcosd(nd))
        ENDDO
        result1 = SQRT(arg1)
        q1 = result1/(x1-g1)
        arg1 = p2*p2 + s1*s1 + x2*p2*s1*xcos
        DO nd=1,nbdirs
          IF (arg1 .EQ. 0.0) THEN
            result1d(nd) = 0.D0
          ELSE
            result1d(nd) = arg1d(nd)/(2.0*SQRT(arg1))
          END IF
          q2d(nd) = result1d(nd)/(x1-g2)
          arg1d(nd) = p1d(nd)*p1 + p1*p1d(nd) + p2d(nd)*p2 + p2*p2d(nd) 
     +      - x2*((p1d(nd)*p2+p1*p2d(nd))*xcos+p1*p2*xcosd(nd))
        ENDDO
        result1 = SQRT(arg1)
        q2 = result1/(x1-g2)
        arg1 = p1*p1 + p2*p2 - x2*p1*p2*xcos
        q3 = SQRT(arg1)
        cost = (q1*q1+q2*q2-q3*q3)/(x2*q1*q2)
        DO nd=1,nbdirs
          IF (arg1 .EQ. 0.0) THEN
            q3d(nd) = 0.D0
          ELSE
            q3d(nd) = arg1d(nd)/(2.0*SQRT(arg1))
          END IF
          costd(nd) = ((q1d(nd)*q1+q1*q1d(nd)+q2d(nd)*q2+q2*q2d(nd)-q3d(
     +      nd)*q3-q3*q3d(nd))*x2*q1*q2-(q1*q1+q2*q2-q3*q3)*x2*(q1d(nd)*
     +      q2+q1*q2d(nd)))/(x2*q1*q2)**2
          IF (cost .EQ. 1.0 .OR. cost .EQ. (-1.0)) THEN
            thetad(nd) = 0.D0
          ELSE
            thetad(nd) = -(costd(nd)/SQRT(1.0-cost**2))
          END IF
        ENDDO
        theta = ACOS(cost)
      END IF
C
      CALL PESLEQ6_DV(vq, vqd, q1, q1d, q2, q2d, theta, thetad, nbdirs)
      CALL BREITB3LIN_DV(vbr, vbrd, q1, q1d, q2, q2d, theta, thetad, 
     +                   nbdirs)
      CALL PESD2X_DV(vd, vdd, q1, q1d, q2, q2d, theta, thetad, nbdirs)
      CALL BODC_DV(v1, v1d, q1, q1d, q2, q2d, theta, thetad, nbdirs)
      CALL REL_DV(vr, vrd, q1, q1d, q2, q2d, theta, thetad, nbdirs)
      CALL POTS_DV(vp, vpd, q1, q1d, q2, q2d, theta, thetad, nbdirs)
      DO nd=1,nbdirs
C
        vd0(nd) = vpd(nd) + vrd(nd) + vbrd(nd) + vdd(nd) + v1d(nd) + vqd
     +    (nd)
      ENDDO
      v = vp + vr + vbr + vd + v1 + vq
      RETURN
      END

C  Differentiation of bodc in forward (tangent) mode (with options multiDirectional):
C   variations   of useful results: v
C   with respect to varying inputs: theta r1 r2
C
      SUBROUTINE BODC_DV(v, vd, r1, r1d, r2, r2d, theta, thetad, nbdirs)
      IMPLICIT NONE
      INTEGER, PARAMETER :: nbdirsmax = 9
C  Hint: nbdirsmax should be the maximum number of differentiation directions
      DOUBLE PRECISION ft
      DOUBLE PRECISION ftd
      DOUBLE PRECISION cv
      DIMENSION ft(50), cv(50)
      DIMENSION ftd(nbdirsmax, 50)
      DOUBLE PRECISION thetaeq
      DOUBLE PRECISION req
      DOUBLE PRECISION s1
      DOUBLE PRECISION s1d(nbdirsmax)
      DOUBLE PRECISION s2
      DOUBLE PRECISION s2d(nbdirsmax)
      INTRINSIC DCOS
      DOUBLE PRECISION s3
      DOUBLE PRECISION s3d(nbdirsmax)
      DOUBLE PRECISION y1
      DOUBLE PRECISION y1d(nbdirsmax)
      DOUBLE PRECISION y2
      DOUBLE PRECISION y2d(nbdirsmax)
      DOUBLE PRECISION y3
      DOUBLE PRECISION y3d(nbdirsmax)
      INTEGER i5
      INTEGER i
      INTEGER nd
      INTEGER ii1
      DOUBLE PRECISION zero
      DOUBLE PRECISION c0
      DOUBLE PRECISION v
      DOUBLE PRECISION vd(nbdirsmax)
      INTEGER nv
      DOUBLE PRECISION theta
      DOUBLE PRECISION thetad(nbdirsmax)
      DOUBLE PRECISION rz
      DOUBLE PRECISION toang
      DOUBLE PRECISION r1
      DOUBLE PRECISION r1d(nbdirsmax)
      DOUBLE PRECISION r2
      DOUBLE PRECISION r2d(nbdirsmax)
      DOUBLE PRECISION rho
      DOUBLE PRECISION scale
      INTEGER nbdirs
C
      DATA c0 /0.0d0/
      DATA scale /1.0d-6/
      DATA nv /50/
      DATA zero /0.0d0/
      DATA rz /0.9576257/
      DATA rho /75.48992362/
      DATA toang /0.5291772/
      DATA cv /2745.1055606459, -59.4634051943, 52.4468059982, 0.0, 
     +     209.0157347415, -30.9569390720, 222.8220666155, -
     +     32.0954739957, 0.0, 0.0, -84.5603232875, 28.3636764469, 0.0, 
     +     -82.9317097732, 0.0, 74.5702444206, 0.0, -301.3739913256, 
     +     0.4721526758, 0.0, 17.0778691448, 9.6100487312, 
     +     118.9501245531, -26.4139825271, 0.0, 6.0253244059, 0.0, 0.0, 
     +     0.0, 96.0354596696, 400.8671847238, 64.3311129088, 0.0, 0.0, 
     +     -159.3984157719, 26.5108357242, 27.9528744878, 0.0, 
     +     3.3262475087, 0.0, 23.3582782463, 0.0, -62.8395365075, 
     +     33.1944328259, 31.8104538207, -11.0876529850, -151.9675922959
     +     , -33.6314521634, 0.0, 0.0/
C
      thetaeq = (180.d0-rho)*3.141592654/180.d0
      req = rz/toang
      DO nd=1,nbdirs
        s1d(nd) = r1d(nd)
        s2d(nd) = -(thetad(nd)*DSIN(theta))
        s3d(nd) = r2d(nd)
C
        y1d(nd) = (s1d(nd)+s3d(nd))/2.0d0
        y2d(nd) = s2d(nd)
        y3d(nd) = (s1d(nd)-s3d(nd))/2.0d0
      ENDDO
      s1 = r1 - req
      s2 = DCOS(theta) - DCOS(thetaeq)
      s3 = r2 - req
      y1 = (s1+s3)/2.0d0
      y2 = s2
      y3 = (s1-s3)/2.0d0
C
      DO i5=1,nv
        ft(i5) = 0.0d0
      ENDDO
C
      ft(1) = 1.0d0
C
      DO ii1=1,50
        DO nd=1,nbdirsmax
          ftd(nd, ii1) = 0.D0
        ENDDO
      ENDDO
      DO nd=1,nbdirs
        ftd(nd, 2) = y1d(nd)
        ftd(nd, 3) = y2d(nd)
        ftd(nd, 4) = y3d(nd)
C
        ftd(nd, 5) = 2*y1*y1d(nd)
        ftd(nd, 6) = 2*y2*y2d(nd)
        ftd(nd, 7) = 2*y3*y3d(nd)
        ftd(nd, 8) = y1d(nd)*y2 + y1*y2d(nd)
        ftd(nd, 9) = y1d(nd)*y3 + y1*y3d(nd)
        ftd(nd, 10) = y2d(nd)*y3 + y2*y3d(nd)
C
        ftd(nd, 11) = 3*y1**2*y1d(nd)
        ftd(nd, 12) = 3*y2**2*y2d(nd)
        ftd(nd, 13) = 3*y3**2*y3d(nd)
        ftd(nd, 14) = 2*y1*y1d(nd)*y2 + y1**2*y2d(nd)
        ftd(nd, 15) = 2*y1*y1d(nd)*y3 + y1**2*y3d(nd)
        ftd(nd, 16) = 2*y2*y2d(nd)*y1 + y2**2*y1d(nd)
        ftd(nd, 17) = 2*y2*y2d(nd)*y3 + y2**2*y3d(nd)
        ftd(nd, 18) = 2*y3*y3d(nd)*y1 + y3**2*y1d(nd)
        ftd(nd, 19) = 2*y3*y3d(nd)*y2 + y3**2*y2d(nd)
        ftd(nd, 20) = (y1d(nd)*y2+y1*y2d(nd))*y3 + y1*y2*y3d(nd)
C
        ftd(nd, 21) = 4*y1**3*y1d(nd)
        ftd(nd, 22) = 4*y2**3*y2d(nd)
        ftd(nd, 23) = 4*y3**3*y3d(nd)
        ftd(nd, 24) = 3*y1**2*y1d(nd)*y2 + y1**3*y2d(nd)
        ftd(nd, 25) = 3*y1**2*y1d(nd)*y3 + y1**3*y3d(nd)
        ftd(nd, 26) = 3*y2**2*y2d(nd)*y1 + y2**3*y1d(nd)
        ftd(nd, 27) = 3*y2**2*y2d(nd)*y3 + y2**3*y3d(nd)
        ftd(nd, 28) = 3*y3**2*y3d(nd)*y1 + y3**3*y1d(nd)
        ftd(nd, 29) = 3*y3**2*y3d(nd)*y2 + y3**3*y2d(nd)
        ftd(nd, 30) = 2*y1*y1d(nd)*y2**2 + y1**2*2*y2*y2d(nd)
        ftd(nd, 31) = 2*y1*y1d(nd)*y3**2 + y1**2*2*y3*y3d(nd)
        ftd(nd, 32) = 2*y2*y2d(nd)*y3**2 + y2**2*2*y3*y3d(nd)
        ftd(nd, 33) = 2*y1*y1d(nd)*y2*y3 + y1**2*(y2d(nd)*y3+y2*y3d(nd))
        ftd(nd, 34) = 2*y2*y2d(nd)*y1*y3 + y2**2*(y1d(nd)*y3+y1*y3d(nd))
        ftd(nd, 35) = 2*y3*y3d(nd)*y1*y2 + y3**2*(y1d(nd)*y2+y1*y2d(nd))
C
        ftd(nd, 36) = 5*y1**4*y1d(nd)
        ftd(nd, 37) = 5*y2**4*y2d(nd)
        ftd(nd, 38) = 5*y3**4*y3d(nd)
        ftd(nd, 39) = 4*y1**3*y1d(nd)*y2 + y1**4*y2d(nd)
        ftd(nd, 40) = 4*y1**3*y1d(nd)*y3 + y1**4*y3d(nd)
        ftd(nd, 41) = 4*y2**3*y2d(nd)*y1 + y2**4*y1d(nd)
        ftd(nd, 42) = 4*y2**3*y2d(nd)*y3 + y2**4*y3d(nd)
        ftd(nd, 43) = 4*y3**3*y3d(nd)*y1 + y3**4*y1d(nd)
        ftd(nd, 44) = 4*y3**3*y3d(nd)*y2 + y3**4*y2d(nd)
        ftd(nd, 45) = 3*y1**2*y1d(nd)*y2**2 + y1**3*2*y2*y2d(nd)
        ftd(nd, 46) = 3*y1**2*y1d(nd)*y3**2 + y1**3*2*y3*y3d(nd)
        ftd(nd, 47) = 3*y2**2*y2d(nd)*y1**2 + y2**3*2*y1*y1d(nd)
        ftd(nd, 48) = 3*y2**2*y2d(nd)*y3**2 + y2**3*2*y3*y3d(nd)
        ftd(nd, 49) = 3*y3**2*y3d(nd)*y1**2 + y3**3*2*y1*y1d(nd)
        ftd(nd, 50) = 3*y3**2*y3d(nd)*y2**2 + y3**3*2*y2*y2d(nd)
      ENDDO
      ft(2) = y1
      ft(3) = y2
      ft(4) = y3
      ft(5) = y1**2
      ft(6) = y2**2
      ft(7) = y3**2
      ft(8) = y1*y2
      ft(9) = y1*y3
      ft(10) = y2*y3
      ft(11) = y1**3
      ft(12) = y2**3
      ft(13) = y3**3
      ft(14) = y1**2*y2
      ft(15) = y1**2*y3
      ft(16) = y2**2*y1
      ft(17) = y2**2*y3
      ft(18) = y3**2*y1
      ft(19) = y3**2*y2
      ft(20) = y1*y2*y3
      ft(21) = y1**4
      ft(22) = y2**4
      ft(23) = y3**4
      ft(24) = y1**3*y2
      ft(25) = y1**3*y3
      ft(26) = y2**3*y1
      ft(27) = y2**3*y3
      ft(28) = y3**3*y1
      ft(29) = y3**3*y2
      ft(30) = y1**2*y2**2
      ft(31) = y1**2*y3**2
      ft(32) = y2**2*y3**2
      ft(33) = y1**2*y2*y3
      ft(34) = y2**2*y1*y3
      ft(35) = y3**2*y1*y2
      ft(36) = y1**5
      ft(37) = y2**5
      ft(38) = y3**5
      ft(39) = y1**4*y2
      ft(40) = y1**4*y3
      ft(41) = y2**4*y1
      ft(42) = y2**4*y3
      ft(43) = y3**4*y1
      ft(44) = y3**4*y2
      ft(45) = y1**3*y2**2
      ft(46) = y1**3*y3**2
      ft(47) = y2**3*y1**2
      ft(48) = y2**3*y3**2
      ft(49) = y3**3*y1**2
      ft(50) = y3**3*y2**2
C
      v = zero
      DO nd=1,nbdirsmax
        vd(nd) = 0.D0
      ENDDO
      DO i=1,nv
        DO nd=1,nbdirs
          vd(nd) = vd(nd) + cv(i)*ftd(nd, i)
        ENDDO
        v = v + cv(i)*ft(i)
      ENDDO
      DO nd=1,nbdirs
C     SCALE AND SHIFT THE ZERO
        vd(nd) = scale*vd(nd)
      ENDDO
      v = c0 + scale*v
      RETURN
      END

C  Differentiation of rel in forward (tangent) mode (with options multiDirectional):
C   variations   of useful results: v
C   with respect to varying inputs: theta r1 r2
C
      SUBROUTINE REL_DV(v, vd, r1, r1d, r2, r2d, theta, thetad, nbdirs)
      IMPLICIT NONE
      INTEGER, PARAMETER :: nbdirsmax = 9
C  Hint: nbdirsmax should be the maximum number of differentiation directions
      DOUBLE PRECISION ft
      DOUBLE PRECISION ftd
      DOUBLE PRECISION cv
      DIMENSION ft(82), cv(82)
      DIMENSION ftd(nbdirsmax, 82)
      DOUBLE PRECISION thetaeq
      DOUBLE PRECISION req
      DOUBLE PRECISION s1
      DOUBLE PRECISION s1d(nbdirsmax)
      DOUBLE PRECISION s2
      DOUBLE PRECISION s2d(nbdirsmax)
      INTRINSIC DCOS
      DOUBLE PRECISION s3
      DOUBLE PRECISION s3d(nbdirsmax)
      DOUBLE PRECISION y1
      DOUBLE PRECISION y1d(nbdirsmax)
      DOUBLE PRECISION y2
      DOUBLE PRECISION y2d(nbdirsmax)
      DOUBLE PRECISION y3
      DOUBLE PRECISION y3d(nbdirsmax)
      INTEGER i5
      INTEGER i
      INTEGER nd
      INTEGER ii1
      DOUBLE PRECISION zero
      DOUBLE PRECISION c0
      DOUBLE PRECISION v
      DOUBLE PRECISION vd(nbdirsmax)
      INTEGER nv
      DOUBLE PRECISION theta
      DOUBLE PRECISION thetad(nbdirsmax)
      DOUBLE PRECISION rz
      DOUBLE PRECISION toang
      DOUBLE PRECISION r1
      DOUBLE PRECISION r1d(nbdirsmax)
      DOUBLE PRECISION r2
      DOUBLE PRECISION r2d(nbdirsmax)
      DOUBLE PRECISION rho
      DOUBLE PRECISION scale
      INTEGER nbdirs
C
      DATA c0 /0.0d0/
      DATA scale /1.0d-6/
      DATA nv /82/
      DATA zero /0.0d0/
      DATA rz /0.9576257/
      DATA rho /75.48992362/
      DATA toang /0.5291772/
      DATA cv /0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -
     +     0.0519929240, -0.0000574005, -0.0001860844, -0.0006152872, 
     +     0.0000879624, -0.0004932809, -0.0000565213, 0.0006886853, -
     +     0.0001027470, 0.0003081795, 0.0001078370, 0.0019925277, 
     +     0.0001286772, -0.0004511478, 0.0000072157, -0.0004439080, -
     +     0.0001416903, 0.0000984644, -0.0003092456, -0.0029118771, -
     +     0.0000562847, 0.0000377062, 0.0002610717, 0.0000367337, 0.0, 
     +     -0.0002565517, 0.0008262448, 0.0, -0.0001036317, 0.0025090209
     +     , 0.0002105614, -0.0000204982, 0.0, -0.0000414402, -
     +     0.0000676532, 0.0000918240, -0.0000400594, 0.0, -0.0006468368
     +     , 0.0001397619, 0.0005356017, 0.0001585601, -0.0001899817, -
     +     0.0015914516, -0.0002822918, 0.0, 0.0004567782, 0.0, 
     +     0.0001064879, 0.0, 0.0, 0.0, -0.0001250236, 0.0000077559, 
     +     0.0007064063, 0.0, 0.0, 0.0, 0.0006102666, -0.0004987995, 0.0
     +     , -0.0001943536, -0.0002855510, 0.0, -0.0002176976, 
     +     0.0002410759, -0.0001644075, -0.0001182853, 0.0, 0.0, -
     +     0.0000272857, 0.0/
C
      thetaeq = (180.d0-rho)*3.141592654/180.d0
      req = rz/toang
      DO nd=1,nbdirs
        s1d(nd) = r1d(nd)
        s2d(nd) = -(thetad(nd)*DSIN(theta))
        s3d(nd) = r2d(nd)
C
        y1d(nd) = (s1d(nd)+s3d(nd))/2.0d0
        y2d(nd) = s2d(nd)
        y3d(nd) = (s1d(nd)-s3d(nd))/2.0d0
      ENDDO
      s1 = r1 - req
      s2 = DCOS(theta) - DCOS(thetaeq)
      s3 = r2 - req
      y1 = (s1+s3)/2.0d0
      y2 = s2
      y3 = (s1-s3)/2.0d0
C
      DO i5=1,nv
        ft(i5) = 0.0d0
      ENDDO
C
      ft(11) = 1.0d0
      DO ii1=1,82
        DO nd=1,nbdirsmax
          ftd(nd, ii1) = 0.D0
        ENDDO
      ENDDO
      DO nd=1,nbdirs
        ftd(nd, 12) = y1d(nd)
        ftd(nd, 13) = y2d(nd)
        ftd(nd, 14) = 2*y1*y1d(nd)
        ftd(nd, 15) = 2*y2*y2d(nd)
        ftd(nd, 16) = 2*y3*y3d(nd)
        ftd(nd, 17) = y1d(nd)*y2 + y1*y2d(nd)
        ftd(nd, 18) = 3*y1**2*y1d(nd)
        ftd(nd, 19) = 3*y2**2*y2d(nd)
        ftd(nd, 20) = 2*y1*y1d(nd)*y2 + y1**2*y2d(nd)
        ftd(nd, 21) = 2*y2*y2d(nd)*y1 + y2**2*y1d(nd)
        ftd(nd, 22) = 2*y3*y3d(nd)*y1 + y3**2*y1d(nd)
        ftd(nd, 23) = 2*y3*y3d(nd)*y2 + y3**2*y2d(nd)
        ftd(nd, 24) = 4*y1**3*y1d(nd)
        ftd(nd, 25) = 4*y2**3*y2d(nd)
        ftd(nd, 26) = 4*y3**3*y3d(nd)
        ftd(nd, 27) = 3*y1**2*y1d(nd)*y2 + y1**3*y2d(nd)
        ftd(nd, 28) = 3*y2**2*y2d(nd)*y1 + y2**3*y1d(nd)
        ftd(nd, 29) = 2*y1*y1d(nd)*y2**2 + y1**2*2*y2*y2d(nd)
        ftd(nd, 30) = 2*y1*y1d(nd)*y3**2 + y1**2*2*y3*y3d(nd)
        ftd(nd, 31) = 2*y2*y2d(nd)*y3**2 + y2**2*2*y3*y3d(nd)
        ftd(nd, 32) = 2*y3*y3d(nd)*y1*y2 + y3**2*(y1d(nd)*y2+y1*y2d(nd))
        ftd(nd, 33) = 5*y1**4*y1d(nd)
        ftd(nd, 34) = 5*y2**4*y2d(nd)
        ftd(nd, 35) = 4*y1**3*y1d(nd)*y2 + y1**4*y2d(nd)
        ftd(nd, 36) = 4*y2**3*y2d(nd)*y1 + y2**4*y1d(nd)
        ftd(nd, 37) = 4*y3**3*y3d(nd)*y1 + y3**4*y1d(nd)
        ftd(nd, 38) = 4*y3**3*y3d(nd)*y2 + y3**4*y2d(nd)
        ftd(nd, 39) = 3*y1**2*y1d(nd)*y2**2 + y1**3*2*y2*y2d(nd)
        ftd(nd, 40) = 3*y1**2*y1d(nd)*y3**2 + y1**3*2*y3*y3d(nd)
        ftd(nd, 41) = 3*y2**2*y2d(nd)*y1**2 + y2**3*2*y1*y1d(nd)
        ftd(nd, 42) = 3*y2**2*y2d(nd)*y3**2 + y2**3*2*y3*y3d(nd)
        ftd(nd, 43) = (2*y1*y1d(nd)*y2+y1**2*y2d(nd))*y3**2 + y1**2*y2*2
     +    *y3*y3d(nd)
        ftd(nd, 44) = (y1d(nd)*y2**2+y1*2*y2*y2d(nd))*y3**2 + y1*y2**2*2
     +    *y3*y3d(nd)
        ftd(nd, 45) = 6*y1**5*y1d(nd)
        ftd(nd, 46) = 6*y2**5*y2d(nd)
        ftd(nd, 47) = 6*y3**5*y3d(nd)
        ftd(nd, 48) = 5*y1**4*y1d(nd)*y2 + y1**5*y2d(nd)
        ftd(nd, 49) = 5*y2**4*y2d(nd)*y1 + y2**5*y1d(nd)
        ftd(nd, 50) = 4*y1**3*y1d(nd)*y2**2 + y1**4*2*y2*y2d(nd)
        ftd(nd, 51) = 4*y2**3*y2d(nd)*y1**2 + y2**4*2*y1*y1d(nd)
        ftd(nd, 52) = 4*y2**3*y2d(nd)*y3**2 + y2**4*2*y3*y3d(nd)
        ftd(nd, 53) = 4*y3**3*y3d(nd)*y2**2 + y3**4*2*y2*y2d(nd)
        ftd(nd, 54) = 4*y1**3*y1d(nd)*y3**2 + y1**4*2*y3*y3d(nd)
        ftd(nd, 55) = 4*y3**3*y3d(nd)*y1**2 + y3**4*2*y1*y1d(nd)
        ftd(nd, 56) = 4*y3**3*y3d(nd)*y1*y2 + y3**4*(y1d(nd)*y2+y1*y2d(
     +    nd))
        ftd(nd, 57) = 3*y1**2*y1d(nd)*y2**3 + y1**3*3*y2**2*y2d(nd)
        ftd(nd, 58) = 3*y2**2*y2d(nd)*y1**3 + y2**3*3*y1**2*y1d(nd)
        ftd(nd, 59) = 3*y1**2*y1d(nd)*y3**2*y2 + y1**3*(2*y3*y3d(nd)*y2+
     +    y3**2*y2d(nd))
        ftd(nd, 60) = 3*y2**2*y2d(nd)*y3**2*y1 + y2**3*(2*y3*y3d(nd)*y1+
     +    y3**2*y1d(nd))
        ftd(nd, 61) = (2*y1*y1d(nd)*y2**2+y1**2*2*y2*y2d(nd))*y1**2 + y1
     +    **3*y2**2*2*y1d(nd)
        ftd(nd, 62) = 7*y1**6*y1d(nd)
        ftd(nd, 63) = 7*y2**6*y2d(nd)
        ftd(nd, 64) = 6*y1**5*y1d(nd)*y2 + y1**6*y2d(nd)
        ftd(nd, 65) = 6*y2**5*y2d(nd)*y1 + y2**6*y1d(nd)
        ftd(nd, 66) = 6*y3**5*y3d(nd)*y1 + y3**6*y1d(nd)
        ftd(nd, 67) = 6*y3**5*y3d(nd)*y2 + y3**6*y2d(nd)
        ftd(nd, 68) = 5*y1**4*y1d(nd)*y2**2 + y1**5*2*y2*y2d(nd)
        ftd(nd, 69) = 5*y1**4*y1d(nd)*y3**2 + y1**5*2*y3*y3d(nd)
        ftd(nd, 70) = 5*y2**4*y2d(nd)*y1**2 + y2**5*2*y1*y1d(nd)
        ftd(nd, 71) = 5*y2**4*y2d(nd)*y3**2 + y2**5*2*y3*y3d(nd)
        ftd(nd, 72) = 4*y1**3*y1d(nd)*y2*y3**2 + y1**4*(y2d(nd)*y3**2+y2
     +    *2*y3*y3d(nd))
        ftd(nd, 73) = 4*y1**3*y1d(nd)*y2**3 + y1**4*3*y2**2*y2d(nd)
        ftd(nd, 74) = 4*y2**3*y2d(nd)*y1*y3**2 + y2**4*(y1d(nd)*y3**2+y1
     +    *2*y3*y3d(nd))
        ftd(nd, 75) = 4*y2**3*y2d(nd)*y1**3 + y2**4*3*y1**2*y1d(nd)
        ftd(nd, 76) = 4*y3**3*y3d(nd)*y1*y2**2 + y3**4*(y1d(nd)*y2**2+y1
     +    *2*y2*y2d(nd))
        ftd(nd, 77) = 4*y3**3*y3d(nd)*y2*y1**2 + y3**4*(y2d(nd)*y1**2+y2
     +    *2*y1*y1d(nd))
        ftd(nd, 78) = 4*y3**3*y3d(nd)*y1**3 + y3**4*3*y1**2*y1d(nd)
        ftd(nd, 79) = 4*y3**3*y3d(nd)*y2**3 + y3**4*3*y2**2*y2d(nd)
        ftd(nd, 80) = 3*y1**2*y1d(nd)*y3**2*y2**2 + y1**3*(2*y3*y3d(nd)*
     +    y2**2+y3**2*2*y2*y2d(nd))
        ftd(nd, 81) = 8*y1**7*y1d(nd)
        ftd(nd, 82) = 8*y2**7*y2d(nd)
      ENDDO
      ft(12) = y1
      ft(13) = y2
      ft(14) = y1**2
      ft(15) = y2**2
      ft(16) = y3**2
      ft(17) = y1*y2
      ft(18) = y1**3
      ft(19) = y2**3
      ft(20) = y1**2*y2
      ft(21) = y2**2*y1
      ft(22) = y3**2*y1
      ft(23) = y3**2*y2
      ft(24) = y1**4
      ft(25) = y2**4
      ft(26) = y3**4
      ft(27) = y1**3*y2
      ft(28) = y2**3*y1
      ft(29) = y1**2*y2**2
      ft(30) = y1**2*y3**2
      ft(31) = y2**2*y3**2
      ft(32) = y3**2*y1*y2
      ft(33) = y1**5
      ft(34) = y2**5
      ft(35) = y1**4*y2
      ft(36) = y2**4*y1
      ft(37) = y3**4*y1
      ft(38) = y3**4*y2
      ft(39) = y1**3*y2**2
      ft(40) = y1**3*y3**2
      ft(41) = y2**3*y1**2
      ft(42) = y2**3*y3**2
      ft(43) = y1**2*y2*y3**2
      ft(44) = y1*y2**2*y3**2
      ft(45) = y1**6
      ft(46) = y2**6
      ft(47) = y3**6
      ft(48) = y1**5*y2
      ft(49) = y2**5*y1
      ft(50) = y1**4*y2**2
      ft(51) = y2**4*y1**2
      ft(52) = y2**4*y3**2
      ft(53) = y3**4*y2**2
      ft(54) = y1**4*y3**2
      ft(55) = y3**4*y1**2
      ft(56) = y3**4*y1*y2
      ft(57) = y1**3*y2**3
      ft(58) = y2**3*y1**3
      ft(59) = y1**3*y3**2*y2
      ft(60) = y2**3*y3**2*y1
      ft(61) = y1**2*y2**2*y1**2
      ft(62) = y1**7
      ft(63) = y2**7
      ft(64) = y1**6*y2
      ft(65) = y2**6*y1
      ft(66) = y3**6*y1
      ft(67) = y3**6*y2
      ft(68) = y1**5*y2**2
      ft(69) = y1**5*y3**2
      ft(70) = y2**5*y1**2
      ft(71) = y2**5*y3**2
      ft(72) = y1**4*y2*y3**2
      ft(73) = y1**4*y2**3
      ft(74) = y2**4*y1*y3**2
      ft(75) = y2**4*y1**3
      ft(76) = y3**4*y1*y2**2
      ft(77) = y3**4*y2*y1**2
      ft(78) = y3**4*y1**3
      ft(79) = y3**4*y2**3
      ft(80) = y1**3*y3**2*y2**2
      ft(81) = y1**8
      ft(82) = y2**8
C
      v = zero
      DO nd=1,nbdirsmax
        vd(nd) = 0.D0
      ENDDO
      DO i=12,nv
        DO nd=1,nbdirs
          vd(nd) = vd(nd) + cv(i)*ftd(nd, i)
        ENDDO
        v = v + cv(i)*ft(i)
      ENDDO
      RETURN
      END

C  Differentiation of breitb3lin in forward (tangent) mode (with options multiDirectional):
C   variations   of useful results: x y vr
C   with respect to varying inputs: x y z
      SUBROUTINE BREITB3LIN_DV(vr, vrd, x, xd, y, yd, z, zd, nbdirs)
      IMPLICIT NONE
      INTEGER, PARAMETER :: nbdirsmax = 9
C  Hint: nbdirsmax should be the maximum number of differentiation directions
      DOUBLE PRECISION seq
      DOUBLE PRECISION e
      DOUBLE PRECISION h
      DOUBLE PRECISION xm
      DOUBLE PRECISION xmd(nbdirsmax)
      DOUBLE PRECISION xp
      DOUBLE PRECISION xpd(nbdirsmax)
      DOUBLE PRECISION xp2
      DOUBLE PRECISION xp2d(nbdirsmax)
      DOUBLE PRECISION zm
      DOUBLE PRECISION zmd(nbdirsmax)
      DOUBLE PRECISION v1
      DOUBLE PRECISION v1d(nbdirsmax)
      DOUBLE PRECISION v2
      DOUBLE PRECISION v2d(nbdirsmax)
      INTEGER nd
      DOUBLE PRECISION x
      DOUBLE PRECISION xd(nbdirsmax)
      DOUBLE PRECISION y
      DOUBLE PRECISION yd(nbdirsmax)
      DOUBLE PRECISION z
      DOUBLE PRECISION zd(nbdirsmax)
      DOUBLE PRECISION vr
      DOUBLE PRECISION vrd(nbdirsmax)
      DOUBLE PRECISION scale
      INTEGER nbdirs
C
      DATA scale /1.0d-6/
C This subroutine contains corrections to the water NBO PES due to the BREIT 
C term.
C [see for istance HM Quiney et al Chem. Phys. Lett. 290 (1998) 473  , 
C Bethe and Salpheter, "Quantum mechanics of one and two-electron atoms"]
C The corrections have been computed on a grid based on the 325 point grid 
C from P&S (see J. chem. phys., 106 (1997) 4618).
C Moreover, a few extra points have been added , as well as a cut in the radial
C coordinates (lines 1-2),  in order to account for high bending modes.
C The final grid used contains 293 points.
C Then the points have been fitted with a polynomial in X,Y and Z, using a 
C Mathematica script.
C The basis set used for the electronic calculations is the set called 'B' 
C  provided by  H.M. Quiney (see Chem. Phys. Lett. ).
C
C Those corrections have been computed by Paolo 
C email:  paolo@theory.phys.ucl.ac.uk  .
C
C %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
C
C  The inputs are in u.a., and X,Y are the distances of the H atoms from
C  the oxygen, and Z is the angle HOH in radiants. The final result is in 
C  Hartree. 
C
C %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
C
C   Potential  symmetrical in X,Y,Z. Full set of
C   derivatives for each order (1-4) and upper terms for others
C
      seq = 1.8240445d0
      e = 1.809645d0
      h = 0.5d0
C
      IF (x .GT. 3.5d0) THEN
        x = 3.5d0
        DO nd=1,nbdirsmax
          xd(nd) = 0.D0
        ENDDO
      END IF
      IF (y .GT. 3.5d0) THEN
        y = 3.5d0
        DO nd=1,nbdirsmax
          yd(nd) = 0.D0
        ENDDO
      END IF
      xm = x - y
      xp = x + y
      xp2 = -e + h*xp
      zm = -seq + z
      DO nd=1,nbdirs
C
        xmd(nd) = xd(nd) - yd(nd)
        xpd(nd) = xd(nd) + yd(nd)
        xp2d(nd) = h*xpd(nd)
        zmd(nd) = zd(nd)
C
        v1d(nd) = 54.16425693884002*2*xm*xmd(nd) + 6.774810680339735*4*
     +    xm**3*xmd(nd) - 0.7125792752605449*6*xm**5*xmd(nd) - 
     +    212.3502737780579*xp2d(nd) - 119.8400228527018*(2*xm*xmd(nd)*
     +    xp2+xm**2*xp2d(nd)) - 29.18501086262345*(4*xm**3*xmd(nd)*xp2+
     +    xm**4*xp2d(nd)) + 221.1271759652365*2*xp2*xp2d(nd) + 
     +    72.97844564936518*(2*xm*xmd(nd)*xp2**2+xm**2*2*xp2*xp2d(nd)) +
     +    89.0829000401668*(4*xm**3*xmd(nd)*xp2**2+xm**4*2*xp2*xp2d(nd))
     +    - 180.6736318109525*3*xp2**2*xp2d(nd) + 321.1679099895901*(2*
     +    xm*xmd(nd)*xp2**3+xm**2*3*xp2**2*xp2d(nd)) - 86.9772033725647*
     +    (4*xm**3*xmd(nd)*xp2**3+xm**4*3*xp2**2*xp2d(nd)) + 
     +    81.467133012329*4*xp2**3*xp2d(nd) - 890.357807854604*(2*xm*xmd
     +    (nd)*xp2**4+xm**2*4*xp2**3*xp2d(nd)) + 57.52112099193129*5*xp2
     +    **4*xp2d(nd) + 676.0925261740228*(2*xm*xmd(nd)*xp2**5+xm**2*5*
     +    xp2**4*xp2d(nd)) - 58.228375665496*6*xp2**5*xp2d(nd) + 
     +    1.323061103513093*zmd(nd) - 0.5270121336782832*(2*xm*xmd(nd)*
     +    zm+xm**2*zmd(nd)) + 0.01985434592556156*(xp2d(nd)*zm+xp2*zmd(
     +    nd)) + 7.715533877300036*(2*xm*xmd(nd)*xp2*zm+xm**2*(xp2d(nd)*
     +    zm+xp2*zmd(nd))) - 6.229144779356836*(4*xm**3*xmd(nd)*xp2*zm+
     +    xm**4*(xp2d(nd)*zm+xp2*zmd(nd))) - 0.1710351457311522*(2*xp2*
     +    xp2d(nd)*zm+xp2**2*zmd(nd)) + 9.92240371274571*(4*xm**3*xmd(nd
     +    )*xp2**2*zm+xm**4*(2*xp2*xp2d(nd)*zm+xp2**2*zmd(nd))) + 
     +    10.47917821735698*(3*xp2**2*xp2d(nd)*zm+xp2**3*zmd(nd)) - 
     +    27.67291046310705*((2*xm*xmd(nd)*zm+xm**2*zmd(nd))*xp2**4+xm**
     +    2*zm*4*xp2**3*xp2d(nd)) + 15.42094531691969*(6*xp2**5*xp2d(nd)
     +    *zm+xp2**6*zmd(nd)) + 7.749223096520598*2*zm*zmd(nd) - 
     +    0.2147443261198608*(2*xm*xmd(nd)*zm**2+xm**2*2*zm*zmd(nd)) - 
     +    1.164069372530965*(4*xm**3*xmd(nd)*zm**2+xm**4*2*zm*zmd(nd)) +
     +    10.24148015693046*(xp2d(nd)*zm**2+xp2*2*zm*zmd(nd)) - 
     +    2.364801830233726*((2*xm*xmd(nd)*xp2+xm**2*xp2d(nd))*zm**2+xm
     +    **2*xp2*2*zm*zmd(nd))
        v2d(nd) = 3.405435470980123*(4*xm**3*xmd(nd)*xp2*zm**2+xm**4*(
     +    xp2d(nd)*zm**2+xp2*2*zm*zmd(nd))) + 11.53659470986242*(2*xp2*
     +    xp2d(nd)*zm**2+xp2**2*2*zm*zmd(nd)) + 40.71096970108562*(3*xp2
     +    **2*xp2d(nd)*zm**2+xp2**3*2*zm*zmd(nd)) - 65.49114275587444*(4
     +    *xp2**3*xp2d(nd)*zm**2+xp2**4*2*zm*zmd(nd)) + 
     +    0.5246601257334035*3*zm**2*zmd(nd) + 1.025008298074623*(2*xm*
     +    xmd(nd)*zm**3+xm**2*3*zm**2*zmd(nd)) + 13.57824254391274*(xp2d
     +    (nd)*zm**3+xp2*3*zm**2*zmd(nd)) - 7.469419914001589*(2*xp2*
     +    xp2d(nd)*zm**3+xp2**2*3*zm**2*zmd(nd)) - 33.70757112970705*(3*
     +    xp2**2*xp2d(nd)*zm**3+xp2**3*3*zm**2*zmd(nd)) + 
     +    30.20514216972833*(4*xp2**3*xp2d(nd)*zm**3+xp2**4*3*zm**2*zmd(
     +    nd)) - 10.53913543447923*4*zm**3*zmd(nd) - 0.6159136295163627*
     +    (2*xm*xmd(nd)*zm**4+xm**2*4*zm**3*zmd(nd)) - 19.56431274355461
     +    *(xp2d(nd)*zm**4+xp2*4*zm**3*zmd(nd)) - 20.81965238209867*(2*
     +    xp2*xp2d(nd)*zm**4+xp2**2*4*zm**3*zmd(nd)) + 5.998958874987758
     +    *(3*xp2**2*xp2d(nd)*zm**4+xp2**3*4*zm**3*zmd(nd)) - 
     +    9.44711265431818*5*zm**4*zmd(nd) - 22.55622148750276*(xp2d(nd)
     +    *zm**5+xp2*5*zm**4*zmd(nd)) + 16.30440168684215*(2*xp2*xp2d(nd
     +    )*zm**5+xp2**2*5*zm**4*zmd(nd)) + 19.20675957512514*6*zm**5*
     +    zmd(nd) + 19.78080962673524*(xp2d(nd)*zm**6+xp2*6*zm**5*zmd(nd
     +    )) + 8.08923849773384*7*zm**6*zmd(nd) - 10.68490632273025*8*zm
     +    **7*zmd(nd)
C
        vrd(nd) = v1d(nd) + v2d(nd)
C      SCALE AND SHIFT THE ZERO
        vrd(nd) = 1.0d-6*vrd(nd)
      ENDDO
      v1 = 7577.371974812879 + 54.16425693884002*xm**2 + 
     +  6.774810680339735*xm**4 - 0.7125792752605449*xm**6 - 
     +  212.3502737780579*xp2 - 119.8400228527018*xm**2*xp2 - 
     +  29.18501086262345*xm**4*xp2 + 221.1271759652365*xp2**2 + 
     +  72.97844564936518*xm**2*xp2**2 + 89.0829000401668*xm**4*xp2**2 -
     +  180.6736318109525*xp2**3 + 321.1679099895901*xm**2*xp2**3 - 
     +  86.9772033725647*xm**4*xp2**3 + 81.467133012329*xp2**4 - 
     +  890.357807854604*xm**2*xp2**4 + 57.52112099193129*xp2**5 + 
     +  676.0925261740228*xm**2*xp2**5 - 58.228375665496*xp2**6 + 
     +  1.323061103513093*zm - 0.5270121336782832*xm**2*zm + 
     +  0.01985434592556156*xp2*zm + 7.715533877300036*xm**2*xp2*zm - 
     +  6.229144779356836*xm**4*xp2*zm - 0.1710351457311522*xp2**2*zm + 
     +  9.92240371274571*xm**4*xp2**2*zm + 10.47917821735698*xp2**3*zm -
     +  27.67291046310705*xm**2*xp2**4*zm + 15.42094531691969*xp2**6*zm 
     +  + 7.749223096520598*zm**2 - 0.2147443261198608*xm**2*zm**2 - 
     +  1.164069372530965*xm**4*zm**2 + 10.24148015693046*xp2*zm**2 - 
     +  2.364801830233726*xm**2*xp2*zm**2
      v2 = 3.405435470980123*xm**4*xp2*zm**2 + 11.53659470986242*xp2**2*
     +  zm**2 + 40.71096970108562*xp2**3*zm**2 - 65.49114275587444*xp2**
     +  4*zm**2 + 0.5246601257334035*zm**3 + 1.025008298074623*xm**2*zm
     +  **3 + 13.57824254391274*xp2*zm**3 - 7.469419914001589*xp2**2*zm
     +  **3 - 33.70757112970705*xp2**3*zm**3 + 30.20514216972833*xp2**4*
     +  zm**3 - 10.53913543447923*zm**4 - 0.6159136295163627*xm**2*zm**4
     +  - 19.56431274355461*xp2*zm**4 - 20.81965238209867*xp2**2*zm**4 +
     +  5.998958874987758*xp2**3*zm**4 - 9.44711265431818*zm**5 - 
     +  22.55622148750276*xp2*zm**5 + 16.30440168684215*xp2**2*zm**5 + 
     +  19.20675957512514*zm**6 + 19.78080962673524*xp2*zm**6 + 
     +  8.08923849773384*zm**7 - 10.68490632273025*zm**8
      vr = v1 + v2
      vr = vr*1.0d-6
C
      RETURN
      END

C  Differentiation of pesd2x in forward (tangent) mode (with options multiDirectional):
C   variations   of useful results: vr
C   with respect to varying inputs: x y z
C
      SUBROUTINE PESD2X_DV(vr, vrd, x, xd, y, yd, z, zd, nbdirs)
      IMPLICIT NONE
      INTEGER, PARAMETER :: nbdirsmax = 9
C  Hint: nbdirsmax should be the maximum number of differentiation directions
      REAL*8 seq
      REAL*8 pi
      INTRINSIC DACOS
      REAL*8 e
      REAL*8 h
      REAL*8 x1
      REAL*8 x1d(nbdirsmax)
      REAL*8 y1
      REAL*8 y1d(nbdirsmax)
      REAL*8 xm
      REAL*8 xmd(nbdirsmax)
      REAL*8 xp
      REAL*8 xpd(nbdirsmax)
      REAL*8 xp2
      REAL*8 xp2d(nbdirsmax)
      REAL*8 zm
      REAL*8 zmd(nbdirsmax)
      REAL*8 v1
      REAL*8 v1d(nbdirsmax)
      REAL*8 v2
      REAL*8 v2d(nbdirsmax)
      INTEGER nd
      REAL*8 x
      REAL*8 xd(nbdirsmax)
      REAL*8 y
      REAL*8 yd(nbdirsmax)
      REAL*8 z
      REAL*8 zd(nbdirsmax)
      REAL*8 vr
      REAL*8 vrd(nbdirsmax)
      INTEGER nbdirs
C This subroutine contains corrections to the water NBO PES due to the Darwin 
C 2 electrons term. Those corrections have been computed by Gyorgy 
C tarczay@para.chem.elte.hu
C Those corrections are computed on the P&S grid of 325 points.
C  (see J. chem. phys., 106 (1997) 4618), to which a few x points have been 
C added in irder to account to high bending modes. The final grid containd 341
C  points.
C
C  The input are in u.a., and X,Y are the distances of the H atoms from
C  the oxygen, and Z is the angle HOH in radiants. The final result is in 
C  Hartree.  
C
      seq = 1.8240445d0
      pi = DACOS(-1.0d0)
      e = 1.809645d0
      h = 0.5d0
      DO nd=1,nbdirs
        x1d(nd) = xd(nd)
        y1d(nd) = yd(nd)
      ENDDO
      x1 = x
      y1 = y
      IF (x .GT. 3.5d0) THEN
        x1 = 3.5d0
        DO nd=1,nbdirsmax
          x1d(nd) = 0.0
        ENDDO
      END IF
      IF (y .GT. 3.5d0) THEN
        y1 = 3.5d0
        DO nd=1,nbdirsmax
          y1d(nd) = 0.0
        ENDDO
      END IF
      xm = x1 - y1
      xp = x1 + y1
      xp2 = -e + h*xp
      zm = -seq + z
      DO nd=1,nbdirs
C
        xmd(nd) = x1d(nd) - y1d(nd)
        xpd(nd) = x1d(nd) + y1d(nd)
        xp2d(nd) = h*xpd(nd)
        zmd(nd) = zd(nd)
C
C   Potential  symmetrical in S1,S2,S3. Full set of
C   derivatives for each order (1-4) and upper terms for others
C
        v1d(nd) = 18.31161578215203*xp2d(nd) - 0.5165611032611932*4*xm**
     +    3*xmd(nd) - 0.5157212949525876*6*xm**5*xmd(nd) - 
     +    9.17958228916955*2*xm*xmd(nd) + 30.14193751791963*(2*xm*xmd(nd
     +    )*xp2+xm**2*xp2d(nd)) - 13.62543868575853*(4*xm**3*xmd(nd)*xp2
     +    +xm**4*xp2d(nd)) - 43.37232019119388*2*xp2*xp2d(nd) - 
     +    50.50353364079294*(2*xm*xmd(nd)*xp2**2+xm**2*2*xp2*xp2d(nd)) +
     +    70.36441193443143*(4*xm**3*xmd(nd)*xp2**2+xm**4*2*xp2*xp2d(nd)
     +    ) + 27.43935454999898*3*xp2**2*xp2d(nd) + 123.751990625258*(2*
     +    xm*xmd(nd)*xp2**3+xm**2*3*xp2**2*xp2d(nd)) - 76.80240321256033
     +    *(4*xm**3*xmd(nd)*xp2**3+xm**4*3*xp2**2*xp2d(nd)) - 
     +    9.50017804016001*4*xp2**3*xp2d(nd) - 363.4487347625543*(2*xm*
     +    xmd(nd)*xp2**4+xm**2*4*xp2**3*xp2d(nd)) + 113.1940248029751*5*
     +    xp2**4*xp2d(nd) + 376.6560011408163*(2*xm*xmd(nd)*xp2**5+xm**2
     +    *5*xp2**4*xp2d(nd)) - 164.6523756673548*6*xp2**5*xp2d(nd) + 
     +    9.16256842998227*zmd(nd) - 1.22230095639504*(2*xm*xmd(nd)*zm+
     +    xm**2*zmd(nd)) + 1.33032571356463*(xp2d(nd)*zm+xp2*zmd(nd)) - 
     +    0.94822119654751*(2*xm*xmd(nd)*xp2*zm+xm**2*(xp2d(nd)*zm+xp2*
     +    zmd(nd))) + 0.7645470802285307*(4*xm**3*xmd(nd)*xp2*zm+xm**4*(
     +    xp2d(nd)*zm+xp2*zmd(nd))) - 11.77270680473595*(2*xp2*xp2d(nd)*
     +    zm+xp2**2*zmd(nd)) - 0.4065994514809928*(4*xm**3*xmd(nd)*xp2**
     +    2*zm+xm**4*(2*xp2*xp2d(nd)*zm+xp2**2*zmd(nd))) - 
     +    2.113651214829342*(3*xp2**2*xp2d(nd)*zm+xp2**3*zmd(nd)) - 
     +    3.653921741665064*((2*xm*xmd(nd)*zm+xm**2*zmd(nd))*xp2**4+xm**
     +    2*zm*4*xp2**3*xp2d(nd)) + 26.53983199106825*(6*xp2**5*xp2d(nd)
     +    *zm+xp2**6*zmd(nd)) + 3.099164302936567*2*zm*zmd(nd)
        v2d(nd) = 0.05845413180128318*(4*xm**3*xmd(nd)*zm**2+xm**4*2*zm*
     +    zmd(nd)) - 0.4668245990549825*(2*xm*xmd(nd)*zm**2+xm**2*2*zm*
     +    zmd(nd)) + 2.708722250876111*(xp2d(nd)*zm**2+xp2*2*zm*zmd(nd))
     +    - 2.578482367020144*((2*xm*xmd(nd)*xp2+xm**2*xp2d(nd))*zm**2+
     +    xm**2*xp2*2*zm*zmd(nd)) - 0.1605392233404811*(4*xm**3*xmd(nd)*
     +    xp2*zm**2+xm**4*(xp2d(nd)*zm**2+xp2*2*zm*zmd(nd))) - 
     +    10.57780429022803*(2*xp2*xp2d(nd)*zm**2+xp2**2*2*zm*zmd(nd)) -
     +    3.496293826717189*(3*xp2**2*xp2d(nd)*zm**2+xp2**3*2*zm*zmd(nd)
     +    ) + 23.46280699747645*(4*xp2**3*xp2d(nd)*zm**2+xp2**4*2*zm*zmd
     +    (nd)) + 1.8547816858377*3*zm**2*zmd(nd) - 0.4003662844685243*(
     +    2*xm*xmd(nd)*zm**3+xm**2*3*zm**2*zmd(nd)) + 3.040229985315839*
     +    (xp2d(nd)*zm**3+xp2*3*zm**2*zmd(nd)) - 4.955739113923876*(2*
     +    xp2*xp2d(nd)*zm**3+xp2**2*3*zm**2*zmd(nd)) + 14.05364889791468
     +    *(3*xp2**2*xp2d(nd)*zm**3+xp2**3*3*zm**2*zmd(nd)) - 
     +    21.6926320924828*(4*xp2**3*xp2d(nd)*zm**3+xp2**4*3*zm**2*zmd(
     +    nd)) - 1.321464834042384*4*zm**3*zmd(nd) + 2.298844571392118*(
     +    2*xm*xmd(nd)*zm**4+xm**2*4*zm**3*zmd(nd)) - 2.633405421645483*
     +    (xp2d(nd)*zm**4+xp2*4*zm**3*zmd(nd)) + 20.97178840867901*(2*
     +    xp2*xp2d(nd)*zm**4+xp2**2*4*zm**3*zmd(nd)) - 32.18658937476802
     +    *(3*xp2**2*xp2d(nd)*zm**4+xp2**3*4*zm**3*zmd(nd)) - 
     +    0.5992225949734171*5*zm**4*zmd(nd) + 2.059827452250273*(xp2d(
     +    nd)*zm**5+xp2*5*zm**4*zmd(nd)) + 0.6453850286056735*(2*xp2*
     +    xp2d(nd)*zm**5+xp2**2*5*zm**4*zmd(nd)) - 0.4620689505336259*6*
     +    zm**5*zmd(nd) + 0.7465042626807512*(xp2d(nd)*zm**6+xp2*6*zm**5
     +    *zmd(nd)) - 0.1254018119377959*7*zm**6*zmd(nd) + 
     +    0.01947721364782498*8*zm**7*zmd(nd)
C
        vrd(nd) = v1d(nd) + v2d(nd)
C
C     SCALE AND SHIFT THE ZERO
        vrd(nd) = 1.0d-6*vrd(nd)
      ENDDO
      v1 = -3263.067522028298 - 9.17958228916955*xm**2 - 
     +  0.5165611032611932*xm**4 - 0.5157212949525876*xm**6 + 
     +  18.31161578215203*xp2 + 30.14193751791963*xm**2*xp2 - 
     +  13.62543868575853*xm**4*xp2 - 43.37232019119388*xp2**2 - 
     +  50.50353364079294*xm**2*xp2**2 + 70.36441193443143*xm**4*xp2**2 
     +  + 27.43935454999898*xp2**3 + 123.751990625258*xm**2*xp2**3 - 
     +  76.80240321256033*xm**4*xp2**3 - 9.50017804016001*xp2**4 - 
     +  363.4487347625543*xm**2*xp2**4 + 113.1940248029751*xp2**5 + 
     +  376.6560011408163*xm**2*xp2**5 - 164.6523756673548*xp2**6 + 
     +  9.16256842998227*zm - 1.22230095639504*xm**2*zm + 
     +  1.33032571356463*xp2*zm - 0.94822119654751*xm**2*xp2*zm + 
     +  0.7645470802285307*xm**4*xp2*zm - 11.77270680473595*xp2**2*zm - 
     +  0.4065994514809928*xm**4*xp2**2*zm - 2.113651214829342*xp2**3*zm
     +  - 3.653921741665064*xm**2*xp2**4*zm + 26.53983199106825*xp2**6*
     +  zm + 3.099164302936567*zm**2
      v2 = -(0.4668245990549825*xm**2*zm**2) + 0.05845413180128318*xm**4
     +  *zm**2 + 2.708722250876111*xp2*zm**2 - 2.578482367020144*xm**2*
     +  xp2*zm**2 - 0.1605392233404811*xm**4*xp2*zm**2 - 
     +  10.57780429022803*xp2**2*zm**2 - 3.496293826717189*xp2**3*zm**2 
     +  + 23.46280699747645*xp2**4*zm**2 + 1.8547816858377*zm**3 - 
     +  0.4003662844685243*xm**2*zm**3 + 3.040229985315839*xp2*zm**3 - 
     +  4.955739113923876*xp2**2*zm**3 + 14.05364889791468*xp2**3*zm**3 
     +  - 21.6926320924828*xp2**4*zm**3 - 1.321464834042384*zm**4 + 
     +  2.298844571392118*xm**2*zm**4 - 2.633405421645483*xp2*zm**4 + 
     +  20.97178840867901*xp2**2*zm**4 - 32.18658937476802*xp2**3*zm**4 
     +  - 0.5992225949734171*zm**5 + 2.059827452250273*xp2*zm**5 + 
     +  0.6453850286056735*xp2**2*zm**5 - 0.4620689505336259*zm**6 + 
     +  0.7465042626807512*xp2*zm**6 - 0.1254018119377959*zm**7 + 
     +  0.01947721364782498*zm**8
      vr = v1 + v2
      vr = vr*1.0d-6
      RETURN
      END

C  Differentiation of pesleq6 in forward (tangent) mode (with options multiDirectional):
C   variations   of useful results: v1
C   with respect to varying inputs: x y z
      SUBROUTINE PESLEQ6_DV(v1, v1d, x, xd, y, yd, z, zd, nbdirs)
      IMPLICIT NONE
      INTEGER, PARAMETER :: nbdirsmax = 9
C  Hint: nbdirsmax should be the maximum number of differentiation directions
      INTEGER nd
      DOUBLE PRECISION v1
      DOUBLE PRECISION v1d(nbdirsmax)
      DOUBLE PRECISION x
      DOUBLE PRECISION xd(nbdirsmax)
      DOUBLE PRECISION y
      DOUBLE PRECISION yd(nbdirsmax)
      DOUBLE PRECISION z
      DOUBLE PRECISION zd(nbdirsmax)
      INTEGER nbdirs
      DO nd=1,nbdirs
C
        v1d(nd) = 1.189315215135138*2*(x-y)*(xd(nd)-yd(nd)) + 
     +    0.824157459531989*4*(x-y)**3*(xd(nd)-yd(nd)) + 
     +    0.03853108456851828*6*(x-y)**5*(xd(nd)-yd(nd)) + 
     +    12.83265590340491*0.5*(xd(nd)+yd(nd)) - 9.51736455454466*(2*(x
     +    -y)*(xd(nd)-yd(nd))*(-1.809659+0.5*(x+y))+(x-y)**2*0.5*(xd(nd)
     +    +yd(nd))) - 3.027576695974858*(4*(x-y)**3*(xd(nd)-yd(nd))*(-
     +    1.809659+0.5*(x+y))+(x-y)**4*0.5*(xd(nd)+yd(nd))) + 
     +    10.94033338777717*2*(-1.809659+0.5*(x+y))*0.5*(xd(nd)+yd(nd)) 
     +    + 15.53332877554612*(2*(x-y)*(xd(nd)-yd(nd))*(-1.809659+0.5*(x
     +    +y))**2+(x-y)**2*2*(-1.809659+0.5*(x+y))*0.5*(xd(nd)+yd(nd))) 
     +    + 6.063907309056958*(4*(x-y)**3*(xd(nd)-yd(nd))*(-1.809659+0.5
     +    *(x+y))**2+(x-y)**4*2*(-1.809659+0.5*(x+y))*0.5*(xd(nd)+yd(nd)
     +    )) - 13.79644533708051*3*(-1.809659+0.5*(x+y))**2*0.5*(xd(nd)+
     +    yd(nd)) - 26.67549601926293*(2*(x-y)*(xd(nd)-yd(nd))*(-
     +    1.809659+0.5*(x+y))**3+(x-y)**2*3*(-1.809659+0.5*(x+y))**2*0.5
     +    *(xd(nd)+yd(nd))) - 6.200836894255189*(4*(x-y)**3*(xd(nd)-yd(
     +    nd))*(-1.809659+0.5*(x+y))**3+(x-y)**4*3*(-1.809659+0.5*(x+y))
     +    **2*0.5*(xd(nd)+yd(nd))) + 5.688103460541242*4*(-1.809659+0.5*
     +    (x+y))**3*0.5*(xd(nd)+yd(nd)) + 52.9835500898771*(2*(x-y)*(xd(
     +    nd)-yd(nd))*(-1.809659+0.5*(x+y))**4+(x-y)**2*4*(-1.809659+0.5
     +    *(x+y))**3*0.5*(xd(nd)+yd(nd))) - 11.88910471926647*5*(-
     +    1.809659+0.5*(x+y))**4*0.5*(xd(nd)+yd(nd)) - 43.99657824332825
     +    *(2*(x-y)*(xd(nd)-yd(nd))*(-1.809659+0.5*(x+y))**5+(x-y)**2*5*
     +    (-1.809659+0.5*(x+y))**4*0.5*(xd(nd)+yd(nd))) + 
     +    15.874512160015*6*(-1.809659+0.5*(x+y))**5*0.5*(xd(nd)+yd(nd))
     +    - 8.60706112101134*zd(nd) + 1.264485336667462*(2*(x-y)*(xd(nd)
     +    -yd(nd))*(-1.824045+z)+(x-y)**2*zd(nd)) - 0.915127202947929*(
     +    0.5*(xd(nd)+yd(nd))*(-1.824045+z)+(-1.809659+0.5*(x+y))*zd(nd)
     +    ) + 0.6556566908758441*((2*(x-y)*(xd(nd)-yd(nd))*(-1.824045+z)
     +    +(x-y)**2*zd(nd))*(-1.809659+0.5*(x+y))+(x-y)**2*(-1.824045+z)
     +    *0.5*(xd(nd)+yd(nd))) - 0.813078328219753*(4*(x-y)**3*(xd(nd)-
     +    yd(nd))*(-1.809659+0.5*(x+y))*(-1.824045+z)+(x-y)**4*(0.5*(xd(
     +    nd)+yd(nd))*(-1.824045+z)+(-1.809659+0.5*(x+y))*zd(nd))) + 
     +    12.42234678727481*(2*(-1.809659+0.5*(x+y))*0.5*(xd(nd)+yd(nd))
     +    *(-1.824045+z)+(-1.809659+0.5*(x+y))**2*zd(nd)) + 
     +    2.805488560712774*(4*(x-y)**3*(xd(nd)-yd(nd))*(-1.809659+0.5*(
     +    x+y))**2*(-1.824045+z)+(x-y)**4*(2*(-1.809659+0.5*(x+y))*0.5*(
     +    xd(nd)+yd(nd))*(-1.824045+z)+(-1.809659+0.5*(x+y))**2*zd(nd)))
     +    - 4.937250627623143*(3*(-1.809659+0.5*(x+y))**2*0.5*(xd(nd)+yd
     +    (nd))*(-1.824045+z)+(-1.809659+0.5*(x+y))**3*zd(nd)) - 
     +    3.095201035295474*((2*(x-y)*(xd(nd)-yd(nd))*(-1.824045+z)+(x-y
     +    )**2*zd(nd))*(-1.809659+0.5*(x+y))**4+(x-y)**2*(-1.824045+z)*4
     +    *(-1.809659+0.5*(x+y))**3*0.5*(xd(nd)+yd(nd))) + 
     +    18.85309150691318*(6*(-1.809659+0.5*(x+y))**5*0.5*(xd(nd)+yd(
     +    nd))*(-1.824045+z)+(-1.809659+0.5*(x+y))**6*zd(nd)) - 
     +    3.209703208057476*2*(-1.824045+z)*zd(nd) + 0.5360421552708203*
     +    (2*(x-y)*(xd(nd)-yd(nd))*(-1.824045+z)**2+(x-y)**2*2*(-
     +    1.824045+z)*zd(nd)) - 0.263467844585989*(4*(x-y)**3*(xd(nd)-yd
     +    (nd))*(-1.824045+z)**2+(x-y)**4*2*(-1.824045+z)*zd(nd)) - 
     +    1.13298516075929*(0.5*(xd(nd)+yd(nd))*(-1.824045+z)**2+(-
     +    1.809659+0.5*(x+y))*2*(-1.824045+z)*zd(nd)) - 
     +    0.06909229322445753*((2*(x-y)*(xd(nd)-yd(nd))*(-1.824045+z)**2
     +    +(x-y)**2*2*(-1.824045+z)*zd(nd))*(-1.809659+0.5*(x+y))+(x-y)
     +    **2*(-1.824045+z)**2*0.5*(xd(nd)+yd(nd))) + 1.649063526503709*
     +    (4*(x-y)**3*(xd(nd)-yd(nd))*(-1.809659+0.5*(x+y))*(-1.824045+z
     +    )**2+(x-y)**4*(0.5*(xd(nd)+yd(nd))*(-1.824045+z)**2+(-1.809659
     +    +0.5*(x+y))*2*(-1.824045+z)*zd(nd))) + 3.603611347474725*(2*(-
     +    1.809659+0.5*(x+y))*0.5*(xd(nd)+yd(nd))*(-1.824045+z)**2+(-
     +    1.809659+0.5*(x+y))**2*2*(-1.824045+z)*zd(nd)) + 
     +    3.757418764813337*(3*(-1.809659+0.5*(x+y))**2*0.5*(xd(nd)+yd(
     +    nd))*(-1.824045+z)**2+(-1.809659+0.5*(x+y))**3*2*(-1.824045+z)
     +    *zd(nd)) + 4.607672502246032*(4*(-1.809659+0.5*(x+y))**3*0.5*(
     +    xd(nd)+yd(nd))*(-1.824045+z)**2+(-1.809659+0.5*(x+y))**4*2*(-
     +    1.824045+z)*zd(nd)) - 0.7490414640610651*3*(-1.824045+z)**2*zd
     +    (nd) - 0.0888181500794012*(2*(x-y)*(xd(nd)-yd(nd))*(-1.824045+
     +    z)**3+(x-y)**2*3*(-1.824045+z)**2*zd(nd)) - 5.334303151299991*
     +    (0.5*(xd(nd)+yd(nd))*(-1.824045+z)**3+(-1.809659+0.5*(x+y))*3*
     +    (-1.824045+z)**2*zd(nd)) + 1.37948603262339*(2*(-1.809659+0.5*
     +    (x+y))*0.5*(xd(nd)+yd(nd))*(-1.824045+z)**3+(-1.809659+0.5*(x+
     +    y))**2*3*(-1.824045+z)**2*zd(nd)) + 11.24395154910416*(3*(-
     +    1.809659+0.5*(x+y))**2*0.5*(xd(nd)+yd(nd))*(-1.824045+z)**3+(-
     +    1.809659+0.5*(x+y))**3*3*(-1.824045+z)**2*zd(nd)) - 
     +    17.85690001161674*(4*(-1.809659+0.5*(x+y))**3*0.5*(xd(nd)+yd(
     +    nd))*(-1.824045+z)**3+(-1.809659+0.5*(x+y))**4*3*(-1.824045+z)
     +    **2*zd(nd)) + 0.7694433624551493*4*(-1.824045+z)**3*zd(nd) - 
     +    0.939662303404418*(2*(x-y)*(xd(nd)-yd(nd))*(-1.824045+z)**4+(x
     +    -y)**2*4*(-1.824045+z)**3*zd(nd)) - 2.296000209594694*(0.5*(xd
     +    (nd)+yd(nd))*(-1.824045+z)**4+(-1.809659+0.5*(x+y))*4*(-
     +    1.824045+z)**3*zd(nd)) - 4.514249057965571*(2*(-1.809659+0.5*(
     +    x+y))*0.5*(xd(nd)+yd(nd))*(-1.824045+z)**4+(-1.809659+0.5*(x+y
     +    ))**2*4*(-1.824045+z)**3*zd(nd)) - 2.324765391545952*(3*(-
     +    1.809659+0.5*(x+y))**2*0.5*(xd(nd)+yd(nd))*(-1.824045+z)**4+(-
     +    1.809659+0.5*(x+y))**3*4*(-1.824045+z)**3*zd(nd)) + 
     +    0.223711667169141*5*(-1.824045+z)**4*zd(nd) + 
     +    1.164515013150094*(0.5*(xd(nd)+yd(nd))*(-1.824045+z)**5+(-
     +    1.809659+0.5*(x+y))*5*(-1.824045+z)**4*zd(nd)) - 
     +    2.825913168656484*(2*(-1.809659+0.5*(x+y))*0.5*(xd(nd)+yd(nd))
     +    *(-1.824045+z)**5+(-1.809659+0.5*(x+y))**2*5*(-1.824045+z)**4*
     +    zd(nd)) + 0.4811142779617512*6*(-1.824045+z)**5*zd(nd) + 
     +    1.292817090808966*(0.5*(xd(nd)+yd(nd))*(-1.824045+z)**6+(-
     +    1.809659+0.5*(x+y))*6*(-1.824045+z)**5*zd(nd)) + 
     +    0.1657130839026308*7*(-1.824045+z)**6*zd(nd) - 
     +    0.02192338698614548*8*(-1.824045+z)**7*zd(nd)
C
        v1d(nd) = v1d(nd)/1000000.0d0
      ENDDO
      v1 = -3514.850376005703 + 1.189315215135138*(x-y)**2 + 
     +  0.824157459531989*(x-y)**4 + 0.03853108456851828*(x-y)**6 + 
     +  12.83265590340491*(-1.809659+0.5*(x+y)) - 9.51736455454466*(x-y)
     +  **2*(-1.809659+0.5*(x+y)) - 3.027576695974858*(x-y)**4*(-
     +  1.809659+0.5*(x+y)) + 10.94033338777717*(-1.809659+0.5*(x+y))**2
     +  + 15.53332877554612*(x-y)**2*(-1.809659+0.5*(x+y))**2 + 
     +  6.063907309056958*(x-y)**4*(-1.809659+0.5*(x+y))**2 - 
     +  13.79644533708051*(-1.809659+0.5*(x+y))**3 - 26.67549601926293*(
     +  x-y)**2*(-1.809659+0.5*(x+y))**3 - 6.200836894255189*(x-y)**4*(-
     +  1.809659+0.5*(x+y))**3 + 5.688103460541242*(-1.809659+0.5*(x+y))
     +  **4 + 52.9835500898771*(x-y)**2*(-1.809659+0.5*(x+y))**4 - 
     +  11.88910471926647*(-1.809659+0.5*(x+y))**5 - 43.99657824332825*(
     +  x-y)**2*(-1.809659+0.5*(x+y))**5 + 15.874512160015*(-1.809659+
     +  0.5*(x+y))**6 - 8.60706112101134*(-1.824045+z) + 
     +  1.264485336667462*(x-y)**2*(-1.824045+z) - 0.915127202947929*(-
     +  1.809659+0.5*(x+y))*(-1.824045+z) + 0.6556566908758441*(x-y)**2*
     +  (-1.809659+0.5*(x+y))*(-1.824045+z) - 0.813078328219753*(x-y)**4
     +  *(-1.809659+0.5*(x+y))*(-1.824045+z) + 12.42234678727481*(-
     +  1.809659+0.5*(x+y))**2*(-1.824045+z) + 2.805488560712774*(x-y)**
     +  4*(-1.809659+0.5*(x+y))**2*(-1.824045+z) - 4.937250627623143*(-
     +  1.809659+0.5*(x+y))**3*(-1.824045+z) - 3.095201035295474*(x-y)**
     +  2*(-1.809659+0.5*(x+y))**4*(-1.824045+z) + 18.85309150691318*(-
     +  1.809659+0.5*(x+y))**6*(-1.824045+z) - 3.209703208057476*(-
     +  1.824045+z)**2 + 0.5360421552708203*(x-y)**2*(-1.824045+z)**2 - 
     +  0.263467844585989*(x-y)**4*(-1.824045+z)**2 - 1.13298516075929*(
     +  -1.809659+0.5*(x+y))*(-1.824045+z)**2 - 0.06909229322445753*(x-y
     +  )**2*(-1.809659+0.5*(x+y))*(-1.824045+z)**2 + 1.649063526503709*
     +  (x-y)**4*(-1.809659+0.5*(x+y))*(-1.824045+z)**2 + 
     +  3.603611347474725*(-1.809659+0.5*(x+y))**2*(-1.824045+z)**2 + 
     +  3.757418764813337*(-1.809659+0.5*(x+y))**3*(-1.824045+z)**2 + 
     +  4.607672502246032*(-1.809659+0.5*(x+y))**4*(-1.824045+z)**2 - 
     +  0.7490414640610651*(-1.824045+z)**3 - 0.0888181500794012*(x-y)**
     +  2*(-1.824045+z)**3 - 5.334303151299991*(-1.809659+0.5*(x+y))*(-
     +  1.824045+z)**3 + 1.37948603262339*(-1.809659+0.5*(x+y))**2*(-
     +  1.824045+z)**3 + 11.24395154910416*(-1.809659+0.5*(x+y))**3*(-
     +  1.824045+z)**3 - 17.85690001161674*(-1.809659+0.5*(x+y))**4*(-
     +  1.824045+z)**3 + 0.7694433624551493*(-1.824045+z)**4 - 
     +  0.939662303404418*(x-y)**2*(-1.824045+z)**4 - 2.296000209594694*
     +  (-1.809659+0.5*(x+y))*(-1.824045+z)**4 - 4.514249057965571*(-
     +  1.809659+0.5*(x+y))**2*(-1.824045+z)**4 - 2.324765391545952*(-
     +  1.809659+0.5*(x+y))**3*(-1.824045+z)**4 + 0.223711667169141*(-
     +  1.824045+z)**5 + 1.164515013150094*(-1.809659+0.5*(x+y))*(-
     +  1.824045+z)**5 - 2.825913168656484*(-1.809659+0.5*(x+y))**2*(-
     +  1.824045+z)**5 + 0.4811142779617512*(-1.824045+z)**6 + 
     +  1.292817090808966*(-1.809659+0.5*(x+y))*(-1.824045+z)**6 + 
     +  0.1657130839026308*(-1.824045+z)**7 - 0.02192338698614548*(-
     +  1.824045+z)**8
      v1 = v1/1000000.0d0
      RETURN
      END

C  Differentiation of pots in forward (tangent) mode (with options multiDirectional):
C   variations   of useful results: v
C   with respect to varying inputs: rij3 rij2 rij1
C
      SUBROUTINE POTS_DV(v, vd, rij1, rij1d, rij2, rij2d, rij3, rij3d, 
     +                   nbdirs)
      IMPLICIT NONE
      INTEGER, PARAMETER :: nbdirsmax = 9
C  Hint: nbdirsmax should be the maximum number of differentiation directions
      DOUBLE PRECISION fmat
      DOUBLE PRECISION fmatd
      DOUBLE PRECISION c5z
      DOUBLE PRECISION cbasis
      INTEGER idx
      INTEGER idxm
      DOUBLE PRECISION ccore
      DOUBLE PRECISION cmass
      DOUBLE PRECISION crest
C
C     pes for h2o,
C     Harry Partridge and David W. Schwenke, J. Chem. Phys.,
C     submitted Nov. 8, 1996.
C     rij(i,1)& rij(i,2) are oh distances in au
C     rij(i,3) is hoh angle in rad
C     v(i) is pes in au
C     n is number of geometries
C     mass dependent factors are included. the nuclear masses
C     should be passed to this program using the array xm in
C     common potmcm. xm(1) is the
C     mass of the hydrogen associated with rij(i,1), and xm(2)
C     is the mass of the hydrogen associated with rij(i,2).
C     all masses are in au.
C
      DIMENSION c5z(245), cbasis(245), ccore(245), crest(245), idx(245, 
     +    3), fmat(15, 3), cmass(9), idxm(9, 3)
      DIMENSION fmatd(nbdirsmax, 15, 3)
      SAVE 
      DOUBLE PRECISION xmh
      DOUBLE PRECISION xmhi
      DOUBLE PRECISION xmd
      DOUBLE PRECISION fact
      DOUBLE PRECISION corr
      INTEGER j
      DOUBLE PRECISION xm1
      DOUBLE PRECISION xm2
      DOUBLE PRECISION rad
      INTRINSIC ACOS
      DOUBLE PRECISION ce
      INTRINSIC COS
      INTRINSIC EXP
      DOUBLE PRECISION x1
      DOUBLE PRECISION x1d(nbdirsmax)
      DOUBLE PRECISION x2
      DOUBLE PRECISION x2d(nbdirsmax)
      DOUBLE PRECISION x3
      DOUBLE PRECISION x3d(nbdirsmax)
      DOUBLE PRECISION rhh
      DOUBLE PRECISION rhhd(nbdirsmax)
      INTRINSIC SQRT
      DOUBLE PRECISION vhh
      DOUBLE PRECISION vhhd(nbdirsmax)
      DOUBLE PRECISION ex
      DOUBLE PRECISION exd(nbdirsmax)
      DOUBLE PRECISION voh1
      DOUBLE PRECISION voh1d(nbdirsmax)
      DOUBLE PRECISION voh2
      DOUBLE PRECISION voh2d(nbdirsmax)
      DOUBLE PRECISION term
      DOUBLE PRECISION termd(nbdirsmax)
      DOUBLE PRECISION v1
      DOUBLE PRECISION v1d(nbdirsmax)
      DOUBLE PRECISION v2
      DOUBLE PRECISION v2d(nbdirsmax)
      DOUBLE PRECISION result1
      DOUBLE PRECISION arg1
      DOUBLE PRECISION arg1d(nbdirsmax)
      INTEGER nd
      INTEGER ii2
      INTEGER ii1
      INTEGER i
      DOUBLE PRECISION deoh
      DOUBLE PRECISION phh1
      DOUBLE PRECISION phh2
      DOUBLE PRECISION rij1
      DOUBLE PRECISION rij1d(nbdirsmax)
      DOUBLE PRECISION rij2
      DOUBLE PRECISION rij2d(nbdirsmax)
      DOUBLE PRECISION rij3
      DOUBLE PRECISION rij3d(nbdirsmax)
      DOUBLE PRECISION v
      DOUBLE PRECISION vd(nbdirsmax)
      DOUBLE PRECISION alphaoh
      DOUBLE PRECISION fcore
      DOUBLE PRECISION frest
      DOUBLE PRECISION fbasis
      DOUBLE PRECISION thetae
      DOUBLE PRECISION reoh
      DOUBLE PRECISION f5z
      DOUBLE PRECISION b1
      INTEGER ifirst
      DOUBLE PRECISION roh
      INTEGER nbdirs
C
C     expansion indicies
C
      DATA (idx(i, 1), i=1,245) /1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     +     1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
     +     , 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
     +     , 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4
     +     , 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4
     +     , 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4
     +     , 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6
     +     , 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5
     +     , 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7
     +     , 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6
     +     , 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5
     +     , 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8
     +     , 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9/
      DATA (idx(i, 2), i=1,245) /1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     +     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
     +     , 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
     +     , 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1
     +     , 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2
     +     , 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3
     +     , 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1
     +     , 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3
     +     , 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1
     +     , 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3
     +     , 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5
     +     , 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2
     +     , 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1/
      DATA (idx(i, 3), i=1,245) /1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
     +     13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1
     +     , 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 6, 7
     +     , 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
     +     , 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7
     +     , 8, 9, 10, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4
     +     , 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2
     +     , 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 
     +     2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4
     +     , 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6
     +     , 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2
     +     , 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7
     +     , 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6
     +     , 7/
C
C     expansion coefficients for 5z ab initio data
C
      DATA (c5z(i), i=1,45) /4.2278462684916d+04, 4.5859382909906d-02, 
     +     9.4804986183058d+03, 7.5485566680955d+02, 1.9865052511496d+03
     +     , 4.3768071560862d+02, 1.4466054104131d+03, 
     +     1.3591924557890d+02, -1.4299027252645d+03, 
     +     6.6966329416373d+02, 3.8065088734195d+03, -
     +     5.0582552618154d+02, -3.2067534385604d+03, 
     +     6.9673382568135d+02, 1.6789085874578d+03, -
     +     3.5387509130093d+03, -1.2902326455736d+04, -
     +     6.4271125232353d+03, -6.9346876863641d+03, -
     +     4.9765266152649d+02, -3.4380943579627d+03, 
     +     3.9925274973255d+03, -1.2703668547457d+04, -
     +     1.5831591056092d+04, 2.9431777405339d+04, 2.5071411925779d+04
     +     , -4.8518811956397d+04, -1.4430705306580d+04, 
     +     2.5844109323395d+04, -2.3371683301770d+03, 
     +     1.2333872678202d+04, 6.6525207018832d+03, -
     +     2.0884209672231d+03, -6.3008463062877d+03, 
     +     4.2548148298119d+04, 2.1561445953347d+04, -
     +     1.5517277060400d+05, 2.9277086555691d+04, 2.6154026873478d+05
     +     , -1.3093666159230d+05, -1.6260425387088d+05, 
     +     1.2311652217133d+05, -5.1764697159603d+04, 
     +     2.5287599662992d+03, 3.0114701659513d+04/
C
      DATA (c5z(i), i=46,90) /-2.0580084492150d+03, 3.3617940269402d+04
     +     , 1.3503379582016d+04, -1.0401149481887d+05, -
     +     6.3248258344140d+04, 2.4576697811922d+05, 8.9685253338525d+04
     +     , -2.3910076031416d+05, -6.5265145723160d+04, 
     +     8.9184290973880d+04, -8.0850272976101d+03, -
     +     3.1054961140464d+04, -1.3684354599285d+04, 
     +     9.3754012976495d+03, -7.4676475789329d+04, -
     +     1.8122270942076d+05, 2.6987309391410d+05, 4.0582251904706d+05
     +     , -4.7103517814752d+05, -3.6115503974010d+05, 
     +     3.2284775325099d+05, 1.3264691929787d+04, 1.8025253924335d+05
     +     , -1.2235925565102d+04, -9.1363898120735d+03, -
     +     4.1294242946858d+04, -3.4995730900098d+04, 
     +     3.1769893347165d+05, 2.8395605362570d+05, -
     +     1.0784536354219d+06, -5.9451106980882d+05, 
     +     1.5215430060937d+06, 4.5943167339298d+05, -
     +     7.9957883936866d+05, -9.2432840622294d+04, 
     +     5.5825423140341d+03, 3.0673594098716d+03, 8.7439532014842d+04
     +     , 1.9113438435651d+05, -3.4306742659939d+05, -
     +     3.0711488132651d+05, 6.2118702580693d+05, -
     +     1.5805976377422d+04, -4.2038045404190d+05, 
     +     3.4847108834282d+05/
C
      DATA (c5z(i), i=91,135) /-1.3486811106770d+04, 3.1256632170871d+04
     +     , 5.3344700235019d+03, 2.6384242145376d+04, 
     +     1.2917121516510d+05, -1.3160848301195d+05, -
     +     4.5853998051192d+05, 3.5760105069089d+05, 6.4570143281747d+05
     +     , -3.6980075904167d+05, -3.2941029518332d+05, -
     +     3.5042507366553d+05, 2.1513919629391d+03, 6.3403845616538d+04
     +     , 6.2152822008047d+04, -4.8805335375295d+05, -
     +     6.3261951398766d+05, 1.8433340786742d+06, 1.4650263449690d+06
     +     , -2.9204939728308d+06, -1.1011338105757d+06, 
     +     1.7270664922758d+06, 3.4925947462024d+05, -
     +     1.9526251371308d+04, -3.2271030511683d+04, -
     +     3.7601575719875d+05, 1.8295007005531d+05, 1.5005699079799d+06
     +     , -1.2350076538617d+06, -1.8221938812193d+06, 
     +     1.5438780841786d+06, -3.2729150692367d+03, 
     +     1.0546285883943d+04, -4.7118461673723d+04, -
     +     1.1458551385925d+05, 2.7704588008958d+05, 7.4145816862032d+05
     +     , -6.6864945408289d+05, -1.6992324545166d+06, 
     +     6.7487333473248d+05, 1.4361670430046d+06, -
     +     2.0837555267331d+05, 4.7678355561019d+05, -
     +     1.5194821786066d+04, -1.1987249931134d+05/
C
C
      DATA (c5z(i), i=136,180) /1.3007675671713d+05, 9.6641544907323d+05
     +     , -5.3379849922258d+05, -2.4303858824867d+06, 
     +     1.5261649025605d+06, 2.0186755858342d+06, -
     +     1.6429544469130d+06, -1.7921520714752d+04, 
     +     1.4125624734639d+04, -2.5345006031695d+04, 
     +     1.7853375909076d+05, -5.4318156343922d+04, -
     +     3.6889685715963d+05, 4.2449670705837d+05, 3.5020329799394d+05
     +     , 9.3825886484788d+03, -8.0012127425648d+05, 
     +     9.8554789856472d+04, 4.9210554266522d+05, -
     +     6.4038493953446d+05, -2.8398085766046d+06, 
     +     2.1390360019254d+06, 6.3452935017176d+06, -
     +     2.3677386290925d+06, -3.9697874352050d+06, -
     +     1.9490691547041d+04, 4.4213579019433d+04, 1.6113884156437d+05
     +     , -7.1247665213713d+05, -1.1808376404616d+06, 
     +     3.0815171952564d+06, 1.3519809705593d+06, -
     +     3.4457898745450d+06, 2.0705775494050d+05, -
     +     4.3778169926622d+05, 8.7041260169714d+03, 1.8982512628535d+05
     +     , -2.9708215504578d+05, -8.8213012222074d+05, 
     +     8.6031109049755d+05, 1.0968800857081d+06, -
     +     1.0114716732602d+06, 1.9367263614108d+05, 2.8678295007137d+05
     +     , -9.4347729862989d+04/
C
      DATA (c5z(i), i=181,225) /4.4154039394108d+04, 5.3686756196439d+05
     +     , 1.7254041770855d+05, -2.5310674462399d+06, -
     +     2.0381171865455d+06, 3.3780796258176d+06, 7.8836220768478d+05
     +     , -1.5307728782887d+05, -3.7573362053757d+05, 
     +     1.0124501604626d+06, 2.0929686545723d+06, -
     +     5.7305706586465d+06, -2.6200352535413d+06, 
     +     7.1543745536691d+06, -1.9733601879064d+04, 
     +     8.5273008477607d+04, 6.1062454495045d+04, -
     +     2.2642508675984d+05, 2.4581653864150d+05, -
     +     9.0376851105383d+05, -4.4367930945690d+05, 
     +     1.5740351463593d+06, 2.4563041445249d+05, -
     +     3.4697646046367d+03, -2.1391370322552d+05, 
     +     4.2358948404842d+05, 5.6270081955003d+05, -
     +     8.5007851251980d+05, -6.1182429537130d+05, 
     +     5.6690751824341d+05, -3.5617502919487d+05, -
     +     8.1875263381402d+02, -2.4506258140060d+05, 
     +     2.5830513731509d+05, 6.0646114465433d+05, -
     +     6.9676584616955d+05, 5.1937406389690d+05, 1.7261913546007d+05
     +     , -1.7405787307472d+04, -3.8301842660567d+05, 
     +     5.4227693205154d+05, 2.5442083515211d+06, -
     +     1.1837755702370d+06, -1.9381959088092d+06, -
     +     4.0642141553575d+05/
C
C
      DATA (c5z(i), i=226,245) /1.1840693827934d+04, -
     +     1.5334500255967d+05, 4.9098619510989d+05, 6.1688992640977d+05
     +     , 2.2351144690009d+05, -1.8550462739570d+06, 
     +     9.6815110649918d+03, -8.1526584681055d+04, -
     +     8.0810433155289d+04, 3.4520506615177d+05, 2.5509863381419d+05
     +     , -1.3331224992157d+05, -4.3119301071653d+05, -
     +     5.9818343115856d+04, 1.7863692414573d+03, 8.9440694919836d+04
     +     , -2.5558967650731d+05, -2.2130423988459d+04, 
     +     4.4973674518316d+05, -2.2094939343618d+05/
C
C     expansion coefficients for basis correction
C
      DATA (cbasis(i), i=1,45) /6.9770019624764d-04, -
     +     2.4209870001642d+01, 1.8113927151562d+01, 3.5107416275981d+01
     +     , -5.4600021126735d+00, -4.8731149608386d+01, 
     +     3.6007189184766d+01, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -7.7178474355102d+01, -
     +     3.8460795013977d+01, -4.6622480912340d+01, 
     +     5.5684951167513d+01, 1.2274939911242d+02, -
     +     1.4325154752086d+02, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -6.0800589055949d+00, 
     +     8.6171499453475d+01, -8.4066835441327d+01, -
     +     5.8228085624620d+01, 2.0237393793875d+02, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     3.3525582670313d+02, 7.0056962392208d+01, -
     +     4.5312502936708d+01/
C
      DATA (cbasis(i), i=46,90) /-3.0441141194247d+02, 
     +     2.8111438108965d+02, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -1.2983583774779d+02, 
     +     3.9781671212935d+01, -6.6793945229609d+01, -
     +     1.9259805675433d+02, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -8.2855757669957d+02, -
     +     5.7003072730941d+01, -3.5604806670066d+01, 
     +     9.6277766002709d+01, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 8.8645622149112d+02, -
     +     7.6908409772041d+01, 6.8111763314154d+01, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00/
C
      DATA (cbasis(i), i=91,135) /2.5090493428062d+02, -
     +     2.3622141780572d+02, 5.8155647658455d+02, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     2.8919570295095d+03, -1.7871014635921d+02, -
     +     1.3515667622500d+02, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -3.6965613754734d+03, 
     +     2.1148158286617d+02, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -1.4795670139431d+03, 
     +     3.6210798138768d+02, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -5.3552886800881d+03, 
     +     3.1006384016202d+02, 0.0000000000000d+00/
C
      DATA (cbasis(i), i=136,180) /0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 1.6241824368764d+03, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     4.3764909606382d+03, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 1.0940849243716d+03, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 3.0743267832931d+03, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00/
C
      DATA (cbasis(i), i=181,225) /0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00/
C
      DATA (cbasis(i), i=226,245) /0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00/
C
C     expansion coefficients for core correction
C
      DATA (ccore(i), i=1,45) /2.4332191647159d-02, -2.9749090113656d+01
     +     , 1.8638980892831d+01, -6.1272361746520d+00, 
     +     2.1567487597605d+00, -1.5552044084945d+01, 
     +     8.9752150543954d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -3.5693557878741d+02, -
     +     3.0398393196894d+00, -6.5936553294576d+00, 
     +     1.6056619388911d+01, 7.8061422868204d+01, -
     +     8.6270891686359d+01, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -3.1688002530217d+01, 
     +     3.7586725583944d+01, -3.2725765966657d+01, -
     +     5.6458213299259d+00, 2.1502613314595d+01, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     5.2789943583277d+02, -4.2461079404962d+00, -
     +     2.4937638543122d+01/
C
      DATA (ccore(i), i=46,90) /-1.1963809321312d+02, 
     +     2.0240663228078d+02, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -6.2574211352272d+02, -
     +     6.9617539465382d+00, -5.9440243471241d+01, 
     +     1.4944220180218d+01, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -1.2851139918332d+03, -
     +     6.5043516710835d+00, 4.0410829440249d+01, -
     +     6.7162452402027d+01, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 1.0031942127832d+03, 
     +     7.6137226541944d+01, -2.7279242226902d+01, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +    /
C
C
      DATA (ccore(i), i=91,135) /-3.3059000871075d+01, 
     +     2.4384498749480d+01, -1.4597931874215d+02, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 1.6559579606045d+03, 1.5038996611400d+02, -
     +     7.3865347730818d+01, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -1.9738401290808d+03, -
     +     1.4149993809415d+02, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -1.2756627454888d+02, 
     +     4.1487702227579d+01, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, -1.7406770966429d+03, -
     +     9.3812204399266d+01, 0.0000000000000d+00/
C
      DATA (ccore(i), i=136,180) /0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, -1.1890301282216d+03, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 2.3723447727360d+03, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, -
     +     1.0279968223292d+03, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 5.7153838472603d+02, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00/
C
      DATA (ccore(i), i=181,225) /0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00/
C
      DATA (ccore(i), i=226,245) /0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00/
C
C     expansion coefficients for v rest
C
      DATA (crest(i), i=1,45) /0.0000000000000d+00, -4.7430930170000d+00
     +     , -1.4422132560000d+01, -1.8061146510000d+01, 
     +     7.5186735000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, -2.7962099800000d+02, 
     +     1.7616414260000d+01, -9.9741392630000d+01, 
     +     7.1402447000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, -7.8571336480000d+01, 
     +     5.2434353250000d+01, 7.7696745000000d+01, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 1.7799123760000d+02
     +     , 1.4564532380000d+02, 2.2347226000000d+02/
C
      DATA (crest(i), i=46,90) /0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, -4.3823284100000d+02, -
     +     7.2846553000000d+02, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, -2.6752313750000d+02, 
     +     3.6170310000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00/
C
      DATA (crest(i), i=91,135) /0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00/
C
C
      DATA (crest(i), i=136,180) /0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00/
C
      DATA (crest(i), i=181,225) /0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00/
C
      DATA (crest(i), i=226,245) /0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00, 0.0000000000000d+00, 
     +     0.0000000000000d+00, 0.0000000000000d+00, 0.0000000000000d+00
     +     , 0.0000000000000d+00/
C
C     expansion indicies for mass correction
C
      DATA idxm /1, 2, 1, 1, 3, 2, 1, 2, 1, 2, 1, 1, 3, 1, 2, 2, 1, 1, 1
     +     , 1, 2, 1, 1, 1, 2, 2, 3/
C
C     expansion coefficients for mass correction
C
      DATA cmass /-8.3554183d+00, 3.7036552d+01, -5.2722136d+00, 
     +     1.6843857d+01, -7.0929741d+01, 5.5380337d+00, -2.9962997d+01
     +     , 1.3637682d+02, -3.0530195d+00/
C
C     two body parameters
C
      DATA reoh, thetae, b1, roh, alphaoh, deoh, phh1, phh2 /0.958649d0
     +     , 104.3475d0, 2.0d0, 0.9519607159623009d0, 
     +     2.587949757553683d0, 42290.92019288289d0, 16.94879431193463d0
     +     , 12.66426998162947d0/
C
C     scaling factors for contributions to emperical potential
C
C       data f5z,fbasis,fcore,frest/0.99967788500000d0,
C     $      0.15860145369897d0,-1.6351695982132d0,1d0/
      DATA f5z, fbasis, fcore, frest /1.0d0, 0.0d0, -1.0d0, 0.0d0/
      DATA ifirst /0/
      IF (ifirst .EQ. 0) THEN
        ifirst = 1
        i = 246
C        write(6,5)(idx(i,j)-1,j=1,3),c5z(i),cbasis(i),ccore(i),crest(i)
C    5   format(1x,3i5,1p4e15.7)
C
C     remove mass correction from vrest
C
        xmh = 1836.152697d0
        xmhi = 1d0/xmh
        xmd = 3670.483031d0
        fact = 1.d0/(1.d0/xmd-1.d0/xmh)
        DO 64 i=1,9
C        write(6,5)(idxm(i,j)-1,j=1,3),cmass(i)
          cmass(i) = cmass(i)*fact
          corr = cmass(i)*xmhi
          IF (idxm(i, 1) .EQ. idxm(i, 2)) corr = corr*0.5d0
          DO j=1,245
            IF (idx(j, 1) .EQ. idxm(i, 1) .AND. idx(j, 2) .EQ. idxm(i, 2
     +          ) .AND. idx(j, 3) .EQ. idxm(i, 3)) GOTO 100
          ENDDO
          GOTO 62
 100      crest(j) = crest(j) - corr
 62       DO j=1,245
            IF (idx(j, 2) .EQ. idxm(i, 1) .AND. idx(j, 1) .EQ. idxm(i, 2
     +          ) .AND. idx(j, 3) .EQ. idxm(i, 3)) GOTO 110
          ENDDO
          GOTO 64
 110      crest(j) = crest(j) - corr
 64     CONTINUE
C       write(6,70)xm
C   70  format(/1x,'masses used for mass correction: ',1p2e15.7)
        xm1 = 1.d0/1836.152697d0
        xm2 = 1.d0/1836.152697d0
        phh1 = phh1*f5z
        deoh = deoh*f5z
        DO i=1,245
          c5z(i) = f5z*c5z(i) + fbasis*cbasis(i) + fcore*ccore(i) + 
     +      frest*crest(i)
        ENDDO
        DO i=1,9
          cmass(i) = cmass(i)*frest
        ENDDO
C
C     convert parameters from 1/cm, angstrom to a.u.
C
        reoh = reoh/0.529177249d0
        b1 = b1*0.529177249d0*0.529177249d0
        DO i=1,245
          c5z(i) = c5z(i)*4.556335d-6
        ENDDO
        DO i=1,9
          cmass(i) = cmass(i)*4.556335d-6
        ENDDO
        result1 = ACOS(-1d0)
        rad = result1/1.8d2
        arg1 = thetae*rad
        ce = COS(arg1)
        phh1 = phh1*EXP(phh2)
        phh1 = phh1*4.556335d-6
        phh2 = phh2*0.529177249d0
        deoh = deoh*4.556335d-6
        roh = roh/0.529177249d0
        alphaoh = alphaoh*0.529177249d0
        c5z(1) = c5z(1)*2d0
      END IF
      arg1 = rij1**2 + rij2**2 - 2d0*rij1*rij2*COS(rij3)
      DO nd=1,nbdirs
C      do 6 i=1,n
        x1d(nd) = rij1d(nd)/reoh
        x2d(nd) = rij2d(nd)/reoh
        x3d(nd) = -(rij3d(nd)*SIN(rij3))
        arg1d(nd) = 2*rij1*rij1d(nd) + 2*rij2*rij2d(nd) - 2d0*((rij1d(nd
     +    )*rij2+rij1*rij2d(nd))*COS(rij3)-rij1*rij2*rij3d(nd)*SIN(rij3)
     +    )
        IF (arg1 .EQ. 0.0) THEN
          rhhd(nd) = 0.D0
        ELSE
          rhhd(nd) = arg1d(nd)/(2.0*SQRT(arg1))
        END IF
        arg1d(nd) = -(phh2*rhhd(nd))
      ENDDO
      x1 = (rij1-reoh)/reoh
      x2 = (rij2-reoh)/reoh
      x3 = COS(rij3) - ce
      rhh = SQRT(arg1)
      arg1 = -(phh2*rhh)
      DO nd=1,nbdirs
        vhhd(nd) = phh1*arg1d(nd)*EXP(arg1)
        arg1d(nd) = -(alphaoh*rij1d(nd))
      ENDDO
      vhh = phh1*EXP(arg1)
      arg1 = -(alphaoh*(rij1-roh))
      ex = EXP(arg1)
      DO nd=1,nbdirs
        exd(nd) = arg1d(nd)*EXP(arg1)
        voh1d(nd) = deoh*(exd(nd)*(ex-2d0)+ex*exd(nd))
        arg1d(nd) = -(alphaoh*rij2d(nd))
      ENDDO
      voh1 = deoh*ex*(ex-2d0)
      arg1 = -(alphaoh*(rij2-roh))
      ex = EXP(arg1)
      DO nd=1,nbdirs
        exd(nd) = arg1d(nd)*EXP(arg1)
        voh2d(nd) = deoh*(exd(nd)*(ex-2d0)+ex*exd(nd))
      ENDDO
      voh2 = deoh*ex*(ex-2d0)
      fmat(1, 1) = 1d0
      fmat(1, 2) = 1d0
      fmat(1, 3) = 1d0
      DO ii1=1,3
        DO ii2=1,15
          DO nd=1,nbdirsmax
            fmatd(nd, ii2, ii1) = 0.D0
          ENDDO
        ENDDO
      ENDDO
      DO j=2,15
        DO nd=1,nbdirs
          fmatd(nd, j, 1) = fmatd(nd, j-1, 1)*x1 + fmat(j-1, 1)*x1d(nd)
        ENDDO
        fmat(j, 1) = fmat(j-1, 1)*x1
        DO nd=1,nbdirs
          fmatd(nd, j, 2) = fmatd(nd, j-1, 2)*x2 + fmat(j-1, 2)*x2d(nd)
        ENDDO
        fmat(j, 2) = fmat(j-1, 2)*x2
        DO nd=1,nbdirs
          fmatd(nd, j, 3) = fmatd(nd, j-1, 3)*x3 + fmat(j-1, 3)*x3d(nd)
        ENDDO
        fmat(j, 3) = fmat(j-1, 3)*x3
      ENDDO
      v = 0d0
      DO nd=1,nbdirsmax
        vd(nd) = 0.D0
      ENDDO
      DO j=2,245
        DO nd=1,nbdirs
          termd(nd) = c5z(j)*((fmatd(nd, idx(j, 1), 1)*fmat(idx(j, 2), 2
     +      )+fmat(idx(j, 1), 1)*fmatd(nd, idx(j, 2), 2)+fmatd(nd, idx(j
     +      , 2), 1)*fmat(idx(j, 1), 2)+fmat(idx(j, 2), 1)*fmatd(nd, idx
     +      (j, 1), 2))*fmat(idx(j, 3), 3)+(fmat(idx(j, 1), 1)*fmat(idx(
     +      j, 2), 2)+fmat(idx(j, 2), 1)*fmat(idx(j, 1), 2))*fmatd(nd, 
     +      idx(j, 3), 3))
          vd(nd) = vd(nd) + termd(nd)
        ENDDO
        term = c5z(j)*(fmat(idx(j, 1), 1)*fmat(idx(j, 2), 2)+fmat(idx(j
     +    , 2), 1)*fmat(idx(j, 1), 2))*fmat(idx(j, 3), 3)
        v = v + term
      ENDDO
      v1 = 0d0
      v2 = 0d0
      DO nd=1,nbdirsmax
        v2d(nd) = 0.D0
      ENDDO
      DO nd=1,nbdirsmax
        v1d(nd) = 0.D0
      ENDDO
      DO j=1,9
        DO nd=1,nbdirs
          v1d(nd) = v1d(nd) + cmass(j)*((fmatd(nd, idxm(j, 1), 1)*fmat(
     +      idxm(j, 2), 2)+fmat(idxm(j, 1), 1)*fmatd(nd, idxm(j, 2), 2))
     +      *fmat(idxm(j, 3), 3)+fmat(idxm(j, 1), 1)*fmat(idxm(j, 2), 2)
     +      *fmatd(nd, idxm(j, 3), 3))
          v2d(nd) = v2d(nd) + cmass(j)*((fmatd(nd, idxm(j, 2), 1)*fmat(
     +      idxm(j, 1), 2)+fmat(idxm(j, 2), 1)*fmatd(nd, idxm(j, 1), 2))
     +      *fmat(idxm(j, 3), 3)+fmat(idxm(j, 2), 1)*fmat(idxm(j, 1), 2)
     +      *fmatd(nd, idxm(j, 3), 3))
        ENDDO
        v1 = v1 + cmass(j)*fmat(idxm(j, 1), 1)*fmat(idxm(j, 2), 2)*fmat(
     +    idxm(j, 3), 3)
        v2 = v2 + cmass(j)*fmat(idxm(j, 2), 1)*fmat(idxm(j, 1), 2)*fmat(
     +    idxm(j, 3), 3)
      ENDDO
      v = v + xm1*v1 + xm2*v2
      arg1 = -(b1*((rij1-reoh)**2+(rij2-reoh)**2))
      DO nd=1,nbdirs
        vd(nd) = vd(nd) + xm1*v1d(nd) + xm2*v2d(nd)
C
        arg1d(nd) = -(b1*(2*(rij1-reoh)*rij1d(nd)+2*(rij2-reoh)*rij2d(nd
     +    )))
        vd(nd) = vd(nd)*EXP(arg1) + v*arg1d(nd)*EXP(arg1) + voh1d(nd) + 
     +    voh2d(nd) + vhhd(nd)
      ENDDO
      v = v*EXP(arg1) + c5z(1) + voh1 + voh2 + vhh
C    6 continue
      RETURN
C       write(6,1)
 1    FORMAT(/1x,'pes for h2o',/1x,
     +       'by Harry Partridge and David W. Schwenke',/1x,
     +       'submitted to J. Chem. Phys. Nov. 8, 1996')
C       write(6,56)
 56   FORMAT(/1x,'parameters before adjustment')
C       write(6,55)phh1,phh2,deoh,alphaoh,roh
 55   FORMAT(/1x,'two body potential parameters:',/1x,'hh: phh1 = '
     +       ,f10.1,' phh2 = ',f5.2,/1x,'oh: deoh = ',f10.1,' alpha = '
     +       ,f7.4,' re = ',f7.4)
C       write(6,4)reoh,thetae,b1
 4    FORMAT(/1x,'three body parameters:',/1x,'reoh = ',f10.4,
     +       ' thetae = ',f10.4,/1x,'betaoh = ',f10.4,/1x,
     +       '    i    j    k',7x,'c5z',9x,'cbasis',10x,'ccore',10x,
     +       'crest')
C       write(6,65)
 65   FORMAT(/1x,'parameters for delta v hdo ',/1x,'    i    j    k')
C
C     adjust parameters using scale factors
C
C       write(6,57)f5z,fbasis,fcore,frest
 57   FORMAT(/1x,'adjusting parameters using scale factors ',/1x,
     +       'f5z =    ',f11.8,/1x,'fbasis = ',f11.8,/1x,'fcore =  '
     +       ,f11.8,/1x,'frest =  ',f11.8)
C       write(6,55)phh1,phh2,deoh,alphaoh,roh
C       write(6,58)reoh,thetae,b1,((idx(i,j)-1,j=1,3),c5z(i),i=1,245)
 58   FORMAT(/1x,'three body parameters:',/1x,'reoh = ',f10.4,
     +       ' thetae = ',f10.4,/1x,'betaoh = ',f10.4,/1x,
     +       '    i    j    k   cijk',/(1x,3i5,1pe15.7))
C       write(6,76)((idxm(i,j),j=1,3),cmass(i),i=1,9)
 76   FORMAT(/1x,'mass correction factors ',/1x,'    i    j    k   cijk'
     +       ,/(1x,3i5,1pe15.7))
      END

